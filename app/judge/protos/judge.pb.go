// Code generated by protoc-gen-go. DO NOT EDIT.
// source: judge.proto

package judge

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JudgeRequest struct {
	JudgerId             string   `protobuf:"bytes,1,opt,name=judger_id,json=judgerId,proto3" json:"judger_id,omitempty"`
	JudgerToken          string   `protobuf:"bytes,2,opt,name=judger_token,json=judgerToken,proto3" json:"judger_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JudgeRequest) Reset()         { *m = JudgeRequest{} }
func (m *JudgeRequest) String() string { return proto.CompactTextString(m) }
func (*JudgeRequest) ProtoMessage()    {}
func (*JudgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{0}
}

func (m *JudgeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JudgeRequest.Unmarshal(m, b)
}
func (m *JudgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JudgeRequest.Marshal(b, m, deterministic)
}
func (m *JudgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeRequest.Merge(m, src)
}
func (m *JudgeRequest) XXX_Size() int {
	return xxx_messageInfo_JudgeRequest.Size(m)
}
func (m *JudgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeRequest proto.InternalMessageInfo

func (m *JudgeRequest) GetJudgerId() string {
	if m != nil {
		return m.JudgerId
	}
	return ""
}

func (m *JudgeRequest) GetJudgerToken() string {
	if m != nil {
		return m.JudgerToken
	}
	return ""
}

type JudgerEvent struct {
	// Types that are valid to be assigned to Message:
	//	*JudgerEvent_JudgeEvent
	Message              isJudgerEvent_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *JudgerEvent) Reset()         { *m = JudgerEvent{} }
func (m *JudgerEvent) String() string { return proto.CompactTextString(m) }
func (*JudgerEvent) ProtoMessage()    {}
func (*JudgerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{1}
}

func (m *JudgerEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JudgerEvent.Unmarshal(m, b)
}
func (m *JudgerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JudgerEvent.Marshal(b, m, deterministic)
}
func (m *JudgerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgerEvent.Merge(m, src)
}
func (m *JudgerEvent) XXX_Size() int {
	return xxx_messageInfo_JudgerEvent.Size(m)
}
func (m *JudgerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JudgerEvent proto.InternalMessageInfo

type isJudgerEvent_Message interface {
	isJudgerEvent_Message()
}

type JudgerEvent_JudgeEvent struct {
	JudgeEvent *JudgeEvent `protobuf:"bytes,1,opt,name=judge_event,json=judgeEvent,proto3,oneof"`
}

func (*JudgerEvent_JudgeEvent) isJudgerEvent_Message() {}

func (m *JudgerEvent) GetMessage() isJudgerEvent_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *JudgerEvent) GetJudgeEvent() *JudgeEvent {
	if x, ok := m.GetMessage().(*JudgerEvent_JudgeEvent); ok {
		return x.JudgeEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JudgerEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JudgerEvent_JudgeEvent)(nil),
	}
}

type JudgeEvent struct {
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JudgeEvent) Reset()         { *m = JudgeEvent{} }
func (m *JudgeEvent) String() string { return proto.CompactTextString(m) }
func (*JudgeEvent) ProtoMessage()    {}
func (*JudgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{2}
}

func (m *JudgeEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JudgeEvent.Unmarshal(m, b)
}
func (m *JudgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JudgeEvent.Marshal(b, m, deterministic)
}
func (m *JudgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeEvent.Merge(m, src)
}
func (m *JudgeEvent) XXX_Size() int {
	return xxx_messageInfo_JudgeEvent.Size(m)
}
func (m *JudgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeEvent proto.InternalMessageInfo

func (m *JudgeEvent) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type Task struct {
	TaskTag              int64    `protobuf:"varint,1,opt,name=task_tag,json=taskTag,proto3" json:"task_tag,omitempty"`
	ProblemId            string   `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language             string   `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Code                 string   `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{3}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskTag() int64 {
	if m != nil {
		return m.TaskTag
	}
	return 0
}

func (m *Task) GetProblemId() string {
	if m != nil {
		return m.ProblemId
	}
	return ""
}

func (m *Task) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Task) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type TaskProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskProgress) Reset()         { *m = TaskProgress{} }
func (m *TaskProgress) String() string { return proto.CompactTextString(m) }
func (*TaskProgress) ProtoMessage()    {}
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{4}
}

func (m *TaskProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskProgress.Unmarshal(m, b)
}
func (m *TaskProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskProgress.Marshal(b, m, deterministic)
}
func (m *TaskProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskProgress.Merge(m, src)
}
func (m *TaskProgress) XXX_Size() int {
	return xxx_messageInfo_TaskProgress.Size(m)
}
func (m *TaskProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskProgress.DiscardUnknown(m)
}

var xxx_messageInfo_TaskProgress proto.InternalMessageInfo

type TaskResult struct {
	TaskTag              int64    `protobuf:"varint,1,opt,name=task_tag,json=taskTag,proto3" json:"task_tag,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Score                float32  `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResult) Reset()         { *m = TaskResult{} }
func (m *TaskResult) String() string { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()    {}
func (*TaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4fa635fb2baaa, []int{5}
}

func (m *TaskResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResult.Unmarshal(m, b)
}
func (m *TaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResult.Marshal(b, m, deterministic)
}
func (m *TaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResult.Merge(m, src)
}
func (m *TaskResult) XXX_Size() int {
	return xxx_messageInfo_TaskResult.Size(m)
}
func (m *TaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResult proto.InternalMessageInfo

func (m *TaskResult) GetTaskTag() int64 {
	if m != nil {
		return m.TaskTag
	}
	return 0
}

func (m *TaskResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *TaskResult) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*JudgeRequest)(nil), "JudgeRequest")
	proto.RegisterType((*JudgerEvent)(nil), "JudgerEvent")
	proto.RegisterType((*JudgeEvent)(nil), "JudgeEvent")
	proto.RegisterType((*Task)(nil), "Task")
	proto.RegisterType((*TaskProgress)(nil), "TaskProgress")
	proto.RegisterType((*TaskResult)(nil), "TaskResult")
}

func init() { proto.RegisterFile("judge.proto", fileDescriptor_a2b4fa635fb2baaa) }

var fileDescriptor_a2b4fa635fb2baaa = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0xef, 0xd2, 0x40,
	0x10, 0xc6, 0x29, 0x94, 0x97, 0x4e, 0x0b, 0x26, 0x1b, 0x43, 0x4a, 0x89, 0x89, 0xee, 0x45, 0x4e,
	0x8b, 0x62, 0xe2, 0xc9, 0x93, 0x09, 0x09, 0x78, 0x30, 0xa6, 0xe2, 0x99, 0x14, 0x3a, 0x6e, 0x80,
	0xc2, 0xd6, 0xdd, 0xad, 0x89, 0xdf, 0xca, 0x8f, 0x68, 0xf6, 0x05, 0xe9, 0xe5, 0xff, 0xbf, 0xf5,
	0xf7, 0xec, 0xb3, 0x3b, 0xcf, 0x4c, 0x07, 0xe2, 0x73, 0x53, 0x72, 0x64, 0xb5, 0x14, 0x5a, 0x64,
	0x73, 0x2e, 0x04, 0xaf, 0x70, 0x69, 0xe9, 0xd0, 0xfc, 0x5c, 0xe2, 0xb5, 0xd6, 0x7f, 0xdc, 0x21,
	0xfd, 0x0a, 0xc9, 0x17, 0xe3, 0xcd, 0xf1, 0x57, 0x83, 0x4a, 0x93, 0x39, 0x44, 0xf6, 0xae, 0xdc,
	0x9f, 0xca, 0x34, 0x78, 0x1d, 0x2c, 0xa2, 0x7c, 0xe4, 0x84, 0x6d, 0x49, 0xde, 0x40, 0xe2, 0x0f,
	0xb5, 0xb8, 0xe0, 0x2d, 0xed, 0xda, 0x73, 0x57, 0x4c, 0xee, 0x8c, 0x44, 0x37, 0x10, 0xdb, 0xf7,
	0xe4, 0xfa, 0x37, 0xde, 0x34, 0x61, 0x3e, 0xca, 0x1e, 0x0d, 0xda, 0x07, 0xe3, 0x55, 0xcc, 0xac,
	0xc5, 0x3a, 0x36, 0x9d, 0x1c, 0xce, 0xff, 0xe9, 0x73, 0x04, 0xc3, 0x2b, 0x2a, 0x55, 0x70, 0xa4,
	0x6f, 0x01, 0x1e, 0x36, 0x32, 0x83, 0x50, 0x17, 0xea, 0xe2, 0x5f, 0xe8, 0xb3, 0x5d, 0xa1, 0x2e,
	0xb9, 0x95, 0x68, 0x0d, 0xa1, 0x21, 0x32, 0x83, 0x91, 0xe1, 0xbd, 0x2e, 0xb8, 0xb5, 0xf5, 0xf2,
	0xa1, 0xe1, 0x5d, 0xc1, 0xc9, 0x2b, 0x80, 0x5a, 0x8a, 0x43, 0x85, 0x57, 0xd3, 0x96, 0x8b, 0x1d,
	0x79, 0x65, 0x5b, 0x92, 0x0c, 0x46, 0x55, 0x71, 0xe3, 0x4d, 0xc1, 0x31, 0xed, 0xb9, 0x9e, 0xef,
	0x4c, 0x08, 0x84, 0x47, 0x51, 0x62, 0x1a, 0x5a, 0xdd, 0x7e, 0xd3, 0x09, 0x24, 0xa6, 0xe2, 0x37,
	0x29, 0xb8, 0x44, 0xa5, 0xe8, 0x0f, 0x00, 0x9b, 0x07, 0x55, 0x53, 0xe9, 0xe7, 0x72, 0x4c, 0x61,
	0x20, 0xad, 0xc9, 0x67, 0xf0, 0x44, 0x5e, 0x42, 0x5f, 0x1d, 0x85, 0x74, 0xd5, 0xbb, 0xb9, 0x83,
	0xd5, 0xdf, 0x00, 0xfa, 0x76, 0x04, 0xe4, 0x3d, 0x4c, 0x72, 0xe4, 0x27, 0xa5, 0x51, 0xba, 0xe9,
	0x92, 0x31, 0x6b, 0xff, 0xb6, 0x2c, 0x61, 0xad, 0xa9, 0xd3, 0xce, 0xbb, 0x80, 0x7c, 0x82, 0x17,
	0xdf, 0x51, 0xb7, 0x63, 0x92, 0x31, 0x6b, 0x63, 0x36, 0x65, 0x6e, 0x31, 0xd8, 0x7d, 0x31, 0xd8,
	0xda, 0x2c, 0x06, 0xed, 0x2c, 0x02, 0xf2, 0x11, 0xc6, 0xfe, 0xb6, 0x6f, 0x2a, 0x66, 0x0f, 0x78,
	0xfa, 0xe6, 0x61, 0x60, 0x95, 0x0f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x8f, 0x24, 0x40,
	0x81, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JudgeClient is the client API for Judge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JudgeClient interface {
	RegisterJudger(ctx context.Context, in *JudgeRequest, opts ...grpc.CallOption) (Judge_RegisterJudgerClient, error)
	SetTaskProgress(ctx context.Context, opts ...grpc.CallOption) (Judge_SetTaskProgressClient, error)
	SetTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*empty.Empty, error)
}

type judgeClient struct {
	cc *grpc.ClientConn
}

func NewJudgeClient(cc *grpc.ClientConn) JudgeClient {
	return &judgeClient{cc}
}

func (c *judgeClient) RegisterJudger(ctx context.Context, in *JudgeRequest, opts ...grpc.CallOption) (Judge_RegisterJudgerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Judge_serviceDesc.Streams[0], "/Judge/RegisterJudger", opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeRegisterJudgerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Judge_RegisterJudgerClient interface {
	Recv() (*JudgerEvent, error)
	grpc.ClientStream
}

type judgeRegisterJudgerClient struct {
	grpc.ClientStream
}

func (x *judgeRegisterJudgerClient) Recv() (*JudgerEvent, error) {
	m := new(JudgerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *judgeClient) SetTaskProgress(ctx context.Context, opts ...grpc.CallOption) (Judge_SetTaskProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Judge_serviceDesc.Streams[1], "/Judge/SetTaskProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeSetTaskProgressClient{stream}
	return x, nil
}

type Judge_SetTaskProgressClient interface {
	Send(*TaskProgress) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type judgeSetTaskProgressClient struct {
	grpc.ClientStream
}

func (x *judgeSetTaskProgressClient) Send(m *TaskProgress) error {
	return x.ClientStream.SendMsg(m)
}

func (x *judgeSetTaskProgressClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *judgeClient) SetTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Judge/SetTaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgeServer is the server API for Judge service.
type JudgeServer interface {
	RegisterJudger(*JudgeRequest, Judge_RegisterJudgerServer) error
	SetTaskProgress(Judge_SetTaskProgressServer) error
	SetTaskResult(context.Context, *TaskResult) (*empty.Empty, error)
}

func RegisterJudgeServer(s *grpc.Server, srv JudgeServer) {
	s.RegisterService(&_Judge_serviceDesc, srv)
}

func _Judge_RegisterJudger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JudgeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JudgeServer).RegisterJudger(m, &judgeRegisterJudgerServer{stream})
}

type Judge_RegisterJudgerServer interface {
	Send(*JudgerEvent) error
	grpc.ServerStream
}

type judgeRegisterJudgerServer struct {
	grpc.ServerStream
}

func (x *judgeRegisterJudgerServer) Send(m *JudgerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Judge_SetTaskProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JudgeServer).SetTaskProgress(&judgeSetTaskProgressServer{stream})
}

type Judge_SetTaskProgressServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*TaskProgress, error)
	grpc.ServerStream
}

type judgeSetTaskProgressServer struct {
	grpc.ServerStream
}

func (x *judgeSetTaskProgressServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *judgeSetTaskProgressServer) Recv() (*TaskProgress, error) {
	m := new(TaskProgress)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Judge_SetTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).SetTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Judge/SetTaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).SetTaskResult(ctx, req.(*TaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _Judge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Judge",
	HandlerType: (*JudgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTaskResult",
			Handler:    _Judge_SetTaskResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterJudger",
			Handler:       _Judge_RegisterJudger_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetTaskProgress",
			Handler:       _Judge_SetTaskProgress_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "judge.proto",
}
