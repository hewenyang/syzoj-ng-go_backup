syntax = "proto2";

package syzoj.judge;

import "google/protobuf/duration.proto";
import "tagger.proto";

option go_package = "github.com/syzoj/syzoj-ng-go/app/model";

message SubmissionContent {
	optional string language = 1 [(tagger.tags) = "bson:\"language,omitempty\""];
	optional string code = 2 [(tagger.tags) = "bson:\"code,omitempty\""];
}

message SubmissionResult {
	optional string status = 1 [(tagger.tags) = "bson:\"status,omitempty\""];
	optional double score = 2 [(tagger.tags) = "bson:\"score,omitempty\""];
	optional int64 memory_usage = 3 [(tagger.tags) = "bson:\"memory_usage,omitempty\""];
	optional google.protobuf.Duration time_usage = 4 [(tagger.tags) = "bson:\"time_usage,omitempty\""];
}

message ProblemConf {
    optional string type = 1 [(tagger.tags) = "yaml:\"type,omitempty\""];
    repeated syzoj.judge.ProblemCase cases = 2 [(tagger.tags) = "yaml:\"cases,omitempty\""];
    optional syzoj.judge.ProblemCase cases_global = 3 [(tagger.tags) = "yaml:\"cases_global,omitempty\""];
    repeated syzoj.judge.ProblemSubtask subtasks = 4 [(tagger.tags) = "yaml:\"subtasks,omitempty\""];
    optional syzoj.judge.ProblemChecker checker = 5 [(tagger.tags) = "yaml:\"checker,omitempty\""];
    repeated syzoj.judge.ProblemLanguage languages = 6 [(tagger.tags) = "yaml:\"languages,omitempty\""];
}

message ProblemCase {
    optional string name = 1 [(tagger.tags) = "yaml:\"name,omitempty\""];
    optional string input_data = 2 [(tagger.tags) = "yaml:\"input_data,omitempty\""];
    optional string answer_data = 3 [(tagger.tags) = "yaml:\"answer_data,omitempty\""];
    optional string time_limit = 4 [(tagger.tags) = "yaml:\"time_limit,omitempty\""];
    optional string memory_limit = 5 [(tagger.tags) = "yaml:\"memory_limit,omitempty\""];
    optional string input_file = 6 [(tagger.tags) = "yaml:\"input_file,omitempty\""];
    optional string output_file = 7 [(tagger.tags) = "yaml:\"output_file,omitempty\""];
}

message ProblemSubtask {
    optional double score = 1 [(tagger.tags) = "yaml:\"score,omitempty\""];
    repeated string cases = 2 [(tagger.tags) = "yaml:\"cases,omitempty\""];
}

message ProblemChecker {
    optional string type = 1 [(tagger.tags) = "yaml:\"type,omitempty\""];
}

message ProblemLanguage {
    optional string extension = 1 [(tagger.tags) = "yaml:\"extension,omitempty\""];
    repeated string flags = 2 [(tagger.tags) = "yaml:\"flags,omitempty\""];
}
