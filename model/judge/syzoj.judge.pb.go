// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.judge.proto

package judge // import "github.com/syzoj/syzoj-ng-go/model/judge"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import legacy "github.com/syzoj/syzoj-ng-go/model/judge/legacy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JudgerAuth struct {
	JudgerId             *string  `protobuf:"bytes,1,opt,name=judger_id,json=judgerId" json:"judger_id,omitempty"`
	JudgerToken          *string  `protobuf:"bytes,2,opt,name=judger_token,json=judgerToken" json:"judger_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JudgerAuth) Reset()         { *m = JudgerAuth{} }
func (m *JudgerAuth) String() string { return proto.CompactTextString(m) }
func (*JudgerAuth) ProtoMessage()    {}
func (*JudgerAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{0}
}
func (m *JudgerAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgerAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgerAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgerAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgerAuth.Merge(dst, src)
}
func (m *JudgerAuth) XXX_Size() int {
	return m.Size()
}
func (m *JudgerAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgerAuth.DiscardUnknown(m)
}

var xxx_messageInfo_JudgerAuth proto.InternalMessageInfo

func (m *JudgerAuth) GetJudgerId() string {
	if m != nil && m.JudgerId != nil {
		return *m.JudgerId
	}
	return ""
}

func (m *JudgerAuth) GetJudgerToken() string {
	if m != nil && m.JudgerToken != nil {
		return *m.JudgerToken
	}
	return ""
}

type FetchTaskRequest struct {
	Auth                 *JudgerAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FetchTaskRequest) Reset()         { *m = FetchTaskRequest{} }
func (m *FetchTaskRequest) String() string { return proto.CompactTextString(m) }
func (*FetchTaskRequest) ProtoMessage()    {}
func (*FetchTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{1}
}
func (m *FetchTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FetchTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTaskRequest.Merge(dst, src)
}
func (m *FetchTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTaskRequest proto.InternalMessageInfo

func (m *FetchTaskRequest) GetAuth() *JudgerAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type FetchTaskResponse struct {
	Task                 *JudgeRequest `protobuf:"bytes,16,opt,name=task" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FetchTaskResponse) Reset()         { *m = FetchTaskResponse{} }
func (m *FetchTaskResponse) String() string { return proto.CompactTextString(m) }
func (*FetchTaskResponse) ProtoMessage()    {}
func (*FetchTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{2}
}
func (m *FetchTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FetchTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTaskResponse.Merge(dst, src)
}
func (m *FetchTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTaskResponse proto.InternalMessageInfo

func (m *FetchTaskResponse) GetTask() *JudgeRequest {
	if m != nil {
		return m.Task
	}
	return nil
}

type HandleTaskRequest struct {
	Auth                 *JudgerAuth    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Response             *JudgeResponse `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	Done                 *bool          `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HandleTaskRequest) Reset()         { *m = HandleTaskRequest{} }
func (m *HandleTaskRequest) String() string { return proto.CompactTextString(m) }
func (*HandleTaskRequest) ProtoMessage()    {}
func (*HandleTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{3}
}
func (m *HandleTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleTaskRequest.Merge(dst, src)
}
func (m *HandleTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandleTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleTaskRequest proto.InternalMessageInfo

func (m *HandleTaskRequest) GetAuth() *JudgerAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *HandleTaskRequest) GetResponse() *JudgeResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *HandleTaskRequest) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

type HandleTaskResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleTaskResponse) Reset()         { *m = HandleTaskResponse{} }
func (m *HandleTaskResponse) String() string { return proto.CompactTextString(m) }
func (*HandleTaskResponse) ProtoMessage()    {}
func (*HandleTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{4}
}
func (m *HandleTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleTaskResponse.Merge(dst, src)
}
func (m *HandleTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *HandleTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleTaskResponse proto.InternalMessageInfo

type JudgeRequest struct {
	// Types that are valid to be assigned to Request:
	//	*JudgeRequest_Traditional
	Request              isJudgeRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *JudgeRequest) Reset()         { *m = JudgeRequest{} }
func (m *JudgeRequest) String() string { return proto.CompactTextString(m) }
func (*JudgeRequest) ProtoMessage()    {}
func (*JudgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{5}
}
func (m *JudgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeRequest.Merge(dst, src)
}
func (m *JudgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *JudgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeRequest proto.InternalMessageInfo

type isJudgeRequest_Request interface {
	isJudgeRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JudgeRequest_Traditional struct {
	Traditional *TraditionalJudgeRequest `protobuf:"bytes,16,opt,name=traditional,oneof"`
}

func (*JudgeRequest_Traditional) isJudgeRequest_Request() {}

func (m *JudgeRequest) GetRequest() isJudgeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *JudgeRequest) GetTraditional() *TraditionalJudgeRequest {
	if x, ok := m.GetRequest().(*JudgeRequest_Traditional); ok {
		return x.Traditional
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JudgeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JudgeRequest_OneofMarshaler, _JudgeRequest_OneofUnmarshaler, _JudgeRequest_OneofSizer, []interface{}{
		(*JudgeRequest_Traditional)(nil),
	}
}

func _JudgeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JudgeRequest)
	// request
	switch x := m.Request.(type) {
	case *JudgeRequest_Traditional:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Traditional); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JudgeRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _JudgeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JudgeRequest)
	switch tag {
	case 16: // request.traditional
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraditionalJudgeRequest)
		err := b.DecodeMessage(msg)
		m.Request = &JudgeRequest_Traditional{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JudgeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JudgeRequest)
	// request
	switch x := m.Request.(type) {
	case *JudgeRequest_Traditional:
		s := proto.Size(x.Traditional)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TraditionalJudgeRequest struct {
	ProblemId            *string               `protobuf:"bytes,1,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	Code                 *TraditionalJudgeCode `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Data                 *TraditionalJudgeData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TraditionalJudgeRequest) Reset()         { *m = TraditionalJudgeRequest{} }
func (m *TraditionalJudgeRequest) String() string { return proto.CompactTextString(m) }
func (*TraditionalJudgeRequest) ProtoMessage()    {}
func (*TraditionalJudgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{6}
}
func (m *TraditionalJudgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraditionalJudgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraditionalJudgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraditionalJudgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraditionalJudgeRequest.Merge(dst, src)
}
func (m *TraditionalJudgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *TraditionalJudgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TraditionalJudgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TraditionalJudgeRequest proto.InternalMessageInfo

func (m *TraditionalJudgeRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

func (m *TraditionalJudgeRequest) GetCode() *TraditionalJudgeCode {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *TraditionalJudgeRequest) GetData() *TraditionalJudgeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type JudgeResponse struct {
	// Types that are valid to be assigned to Response:
	//	*JudgeResponse_String_
	//	*JudgeResponse_Legacy
	Response             isJudgeResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *JudgeResponse) Reset()         { *m = JudgeResponse{} }
func (m *JudgeResponse) String() string { return proto.CompactTextString(m) }
func (*JudgeResponse) ProtoMessage()    {}
func (*JudgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{7}
}
func (m *JudgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeResponse.Merge(dst, src)
}
func (m *JudgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *JudgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeResponse proto.InternalMessageInfo

type isJudgeResponse_Response interface {
	isJudgeResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JudgeResponse_String_ struct {
	String_ *JudgeStringResponse `protobuf:"bytes,16,opt,name=string,oneof"`
}
type JudgeResponse_Legacy struct {
	Legacy *legacy.ProgressReportData `protobuf:"bytes,17,opt,name=legacy,oneof"`
}

func (*JudgeResponse_String_) isJudgeResponse_Response() {}
func (*JudgeResponse_Legacy) isJudgeResponse_Response()  {}

func (m *JudgeResponse) GetResponse() isJudgeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *JudgeResponse) GetString_() *JudgeStringResponse {
	if x, ok := m.GetResponse().(*JudgeResponse_String_); ok {
		return x.String_
	}
	return nil
}

func (m *JudgeResponse) GetLegacy() *legacy.ProgressReportData {
	if x, ok := m.GetResponse().(*JudgeResponse_Legacy); ok {
		return x.Legacy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JudgeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JudgeResponse_OneofMarshaler, _JudgeResponse_OneofUnmarshaler, _JudgeResponse_OneofSizer, []interface{}{
		(*JudgeResponse_String_)(nil),
		(*JudgeResponse_Legacy)(nil),
	}
}

func _JudgeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JudgeResponse)
	// response
	switch x := m.Response.(type) {
	case *JudgeResponse_String_:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.String_); err != nil {
			return err
		}
	case *JudgeResponse_Legacy:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Legacy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JudgeResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _JudgeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JudgeResponse)
	switch tag {
	case 16: // response.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JudgeStringResponse)
		err := b.DecodeMessage(msg)
		m.Response = &JudgeResponse_String_{msg}
		return true, err
	case 17: // response.legacy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(legacy.ProgressReportData)
		err := b.DecodeMessage(msg)
		m.Response = &JudgeResponse_Legacy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JudgeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JudgeResponse)
	// response
	switch x := m.Response.(type) {
	case *JudgeResponse_String_:
		s := proto.Size(x.String_)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JudgeResponse_Legacy:
		s := proto.Size(x.Legacy)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type JudgeStringResponse struct {
	Message              *string  `protobuf:"bytes,16,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JudgeStringResponse) Reset()         { *m = JudgeStringResponse{} }
func (m *JudgeStringResponse) String() string { return proto.CompactTextString(m) }
func (*JudgeStringResponse) ProtoMessage()    {}
func (*JudgeStringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{8}
}
func (m *JudgeStringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeStringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeStringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeStringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeStringResponse.Merge(dst, src)
}
func (m *JudgeStringResponse) XXX_Size() int {
	return m.Size()
}
func (m *JudgeStringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeStringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeStringResponse proto.InternalMessageInfo

func (m *JudgeStringResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type TraditionalJudgeData struct {
	TimeLimit            *float64 `protobuf:"fixed64,16,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	MemoryLimit          *float64 `protobuf:"fixed64,17,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraditionalJudgeData) Reset()         { *m = TraditionalJudgeData{} }
func (m *TraditionalJudgeData) String() string { return proto.CompactTextString(m) }
func (*TraditionalJudgeData) ProtoMessage()    {}
func (*TraditionalJudgeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{9}
}
func (m *TraditionalJudgeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraditionalJudgeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraditionalJudgeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraditionalJudgeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraditionalJudgeData.Merge(dst, src)
}
func (m *TraditionalJudgeData) XXX_Size() int {
	return m.Size()
}
func (m *TraditionalJudgeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TraditionalJudgeData.DiscardUnknown(m)
}

var xxx_messageInfo_TraditionalJudgeData proto.InternalMessageInfo

func (m *TraditionalJudgeData) GetTimeLimit() float64 {
	if m != nil && m.TimeLimit != nil {
		return *m.TimeLimit
	}
	return 0
}

func (m *TraditionalJudgeData) GetMemoryLimit() float64 {
	if m != nil && m.MemoryLimit != nil {
		return *m.MemoryLimit
	}
	return 0
}

type TraditionalJudgeCode struct {
	Language             *string  `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Code                 *string  `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraditionalJudgeCode) Reset()         { *m = TraditionalJudgeCode{} }
func (m *TraditionalJudgeCode) String() string { return proto.CompactTextString(m) }
func (*TraditionalJudgeCode) ProtoMessage()    {}
func (*TraditionalJudgeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_10284e46fa82283c, []int{10}
}
func (m *TraditionalJudgeCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraditionalJudgeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraditionalJudgeCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraditionalJudgeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraditionalJudgeCode.Merge(dst, src)
}
func (m *TraditionalJudgeCode) XXX_Size() int {
	return m.Size()
}
func (m *TraditionalJudgeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TraditionalJudgeCode.DiscardUnknown(m)
}

var xxx_messageInfo_TraditionalJudgeCode proto.InternalMessageInfo

func (m *TraditionalJudgeCode) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *TraditionalJudgeCode) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*JudgerAuth)(nil), "syzoj.judge.JudgerAuth")
	proto.RegisterType((*FetchTaskRequest)(nil), "syzoj.judge.FetchTaskRequest")
	proto.RegisterType((*FetchTaskResponse)(nil), "syzoj.judge.FetchTaskResponse")
	proto.RegisterType((*HandleTaskRequest)(nil), "syzoj.judge.HandleTaskRequest")
	proto.RegisterType((*HandleTaskResponse)(nil), "syzoj.judge.HandleTaskResponse")
	proto.RegisterType((*JudgeRequest)(nil), "syzoj.judge.JudgeRequest")
	proto.RegisterType((*TraditionalJudgeRequest)(nil), "syzoj.judge.TraditionalJudgeRequest")
	proto.RegisterType((*JudgeResponse)(nil), "syzoj.judge.JudgeResponse")
	proto.RegisterType((*JudgeStringResponse)(nil), "syzoj.judge.JudgeStringResponse")
	proto.RegisterType((*TraditionalJudgeData)(nil), "syzoj.judge.TraditionalJudgeData")
	proto.RegisterType((*TraditionalJudgeCode)(nil), "syzoj.judge.TraditionalJudgeCode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JudgeServiceClient is the client API for JudgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JudgeServiceClient interface {
	FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error)
	HandleTask(ctx context.Context, opts ...grpc.CallOption) (JudgeService_HandleTaskClient, error)
}

type judgeServiceClient struct {
	cc *grpc.ClientConn
}

func NewJudgeServiceClient(cc *grpc.ClientConn) JudgeServiceClient {
	return &judgeServiceClient{cc}
}

func (c *judgeServiceClient) FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error) {
	out := new(FetchTaskResponse)
	err := c.cc.Invoke(ctx, "/syzoj.judge.JudgeService/FetchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) HandleTask(ctx context.Context, opts ...grpc.CallOption) (JudgeService_HandleTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JudgeService_serviceDesc.Streams[0], "/syzoj.judge.JudgeService/HandleTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeServiceHandleTaskClient{stream}
	return x, nil
}

type JudgeService_HandleTaskClient interface {
	Send(*HandleTaskRequest) error
	CloseAndRecv() (*HandleTaskResponse, error)
	grpc.ClientStream
}

type judgeServiceHandleTaskClient struct {
	grpc.ClientStream
}

func (x *judgeServiceHandleTaskClient) Send(m *HandleTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *judgeServiceHandleTaskClient) CloseAndRecv() (*HandleTaskResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HandleTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JudgeServiceServer is the server API for JudgeService service.
type JudgeServiceServer interface {
	FetchTask(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error)
	HandleTask(JudgeService_HandleTaskServer) error
}

func RegisterJudgeServiceServer(s *grpc.Server, srv JudgeServiceServer) {
	s.RegisterService(&_JudgeService_serviceDesc, srv)
}

func _JudgeService_FetchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).FetchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.judge.JudgeService/FetchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).FetchTask(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_HandleTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JudgeServiceServer).HandleTask(&judgeServiceHandleTaskServer{stream})
}

type JudgeService_HandleTaskServer interface {
	SendAndClose(*HandleTaskResponse) error
	Recv() (*HandleTaskRequest, error)
	grpc.ServerStream
}

type judgeServiceHandleTaskServer struct {
	grpc.ServerStream
}

func (x *judgeServiceHandleTaskServer) SendAndClose(m *HandleTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *judgeServiceHandleTaskServer) Recv() (*HandleTaskRequest, error) {
	m := new(HandleTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JudgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syzoj.judge.JudgeService",
	HandlerType: (*JudgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTask",
			Handler:    _JudgeService_FetchTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleTask",
			Handler:       _JudgeService_HandleTask_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "syzoj.judge.proto",
}

func (m *JudgerAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgerAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JudgerId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.JudgerId)))
		i += copy(dAtA[i:], *m.JudgerId)
	}
	if m.JudgerToken != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.JudgerToken)))
		i += copy(dAtA[i:], *m.JudgerToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FetchTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Auth.Size()))
		n1, err := m.Auth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FetchTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Task.Size()))
		n2, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Auth.Size()))
		n3, err := m.Auth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Response.Size()))
		n4, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Done != nil {
		dAtA[i] = 0x18
		i++
		if *m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeRequest_Traditional) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Traditional != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Traditional.Size()))
		n6, err := m.Traditional.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *TraditionalJudgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraditionalJudgeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProblemId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Code.Size()))
		n7, err := m.Code.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn9, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeResponse_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.String_ != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.String_.Size()))
		n10, err := m.String_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *JudgeResponse_Legacy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Legacy != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(m.Legacy.Size()))
		n11, err := m.Legacy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *JudgeStringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeStringResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.Message)))
		i += copy(dAtA[i:], *m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TraditionalJudgeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraditionalJudgeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeLimit != nil {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TimeLimit))))
		i += 8
	}
	if m.MemoryLimit != nil {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MemoryLimit))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TraditionalJudgeCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraditionalJudgeCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Language != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.Language)))
		i += copy(dAtA[i:], *m.Language)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudge(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojJudge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JudgerAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JudgerId != nil {
		l = len(*m.JudgerId)
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.JudgerToken != nil {
		l = len(*m.JudgerToken)
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 2 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.Done != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeRequest_Traditional) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Traditional != nil {
		l = m.Traditional.Size()
		n += 2 + l + sovSyzojJudge(uint64(l))
	}
	return n
}
func (m *TraditionalJudgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.Code != nil {
		l = m.Code.Size()
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeResponse_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.String_ != nil {
		l = m.String_.Size()
		n += 2 + l + sovSyzojJudge(uint64(l))
	}
	return n
}
func (m *JudgeResponse_Legacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Legacy != nil {
		l = m.Legacy.Size()
		n += 2 + l + sovSyzojJudge(uint64(l))
	}
	return n
}
func (m *JudgeStringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = len(*m.Message)
		n += 2 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TraditionalJudgeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeLimit != nil {
		n += 10
	}
	if m.MemoryLimit != nil {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TraditionalJudgeCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != nil {
		l = len(*m.Language)
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovSyzojJudge(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojJudge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojJudge(x uint64) (n int) {
	return sovSyzojJudge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JudgerAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgerAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgerAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JudgerId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JudgerToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &JudgerAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &JudgeRequest{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &JudgerAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &JudgeResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Done = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traditional", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraditionalJudgeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &JudgeRequest_Traditional{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraditionalJudgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraditionalJudgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraditionalJudgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Code == nil {
				m.Code = &TraditionalJudgeCode{}
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TraditionalJudgeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JudgeStringResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &JudgeResponse_String_{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Legacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &legacy.ProgressReportData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &JudgeResponse_Legacy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgeStringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeStringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeStringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraditionalJudgeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraditionalJudgeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraditionalJudgeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TimeLimit = &v2
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MemoryLimit = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraditionalJudgeCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraditionalJudgeCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraditionalJudgeCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Language = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojJudge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojJudge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojJudge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojJudge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojJudge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojJudge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojJudge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojJudge   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("syzoj.judge.proto", fileDescriptor_syzoj_judge_10284e46fa82283c) }

var fileDescriptor_syzoj_judge_10284e46fa82283c = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xee, 0xfc, 0x7e, 0xa1, 0xcd, 0x9e, 0xad, 0xd0, 0x8c, 0x85, 0xae, 0x91, 0xc6, 0x74, 0x11,
	0x09, 0x94, 0x24, 0x10, 0xb0, 0x17, 0xde, 0xa8, 0x51, 0x4a, 0x5a, 0x0a, 0xca, 0x34, 0x17, 0xe2,
	0x4d, 0x99, 0xee, 0x0e, 0x9b, 0x6d, 0x76, 0x77, 0xe2, 0xec, 0xac, 0x10, 0x9f, 0xc1, 0x17, 0xf0,
	0x05, 0xbc, 0xf1, 0x45, 0xbc, 0xf4, 0x11, 0x24, 0x4f, 0x22, 0xf3, 0x27, 0xc9, 0xc6, 0x24, 0x0a,
	0xde, 0x84, 0xcc, 0x77, 0xbe, 0xef, 0x9c, 0x33, 0xdf, 0x9c, 0xb3, 0x50, 0xcb, 0xa7, 0x9f, 0xf8,
	0x5d, 0xe7, 0xae, 0x08, 0x23, 0xd6, 0x99, 0x08, 0x2e, 0x39, 0x76, 0x4b, 0x50, 0xfd, 0x34, 0xe5,
	0x21, 0x4b, 0xba, 0xfa, 0xd0, 0x4d, 0x58, 0x44, 0x83, 0x69, 0xb7, 0x2c, 0x31, 0x90, 0x51, 0xfa,
	0x57, 0x00, 0x97, 0x0a, 0x15, 0x2f, 0x0b, 0x39, 0xc2, 0x0f, 0xc1, 0xd1, 0x1c, 0x71, 0x13, 0x87,
	0x1e, 0x6a, 0xa2, 0x96, 0x43, 0xaa, 0x06, 0xb8, 0x08, 0xf1, 0x09, 0xec, 0xdb, 0xa0, 0xe4, 0x63,
	0x96, 0x79, 0xff, 0xe9, 0xb8, 0x6b, 0xb0, 0xa1, 0x82, 0xfc, 0xe7, 0x70, 0x70, 0xce, 0x64, 0x30,
	0x1a, 0xd2, 0x7c, 0x4c, 0xd8, 0x87, 0x82, 0xe5, 0x12, 0x9f, 0x42, 0x85, 0x16, 0x72, 0xa4, 0xd3,
	0xb9, 0xbd, 0xa3, 0x4e, 0xb9, 0x95, 0x65, 0x69, 0xa2, 0x49, 0x7e, 0x1f, 0x6a, 0xa5, 0x04, 0xf9,
	0x84, 0x67, 0x39, 0xc3, 0x6d, 0xa8, 0x48, 0x9a, 0x8f, 0xbd, 0x03, 0x9d, 0xe1, 0xc1, 0x7a, 0x06,
	0x5b, 0x8a, 0x68, 0x9a, 0xff, 0x19, 0x41, 0x6d, 0x40, 0xb3, 0x30, 0x61, 0xff, 0xda, 0x06, 0x3e,
	0x83, 0xaa, 0xb0, 0xd5, 0xf5, 0x35, 0xdd, 0x5e, 0x7d, 0x53, 0x55, 0xc3, 0x20, 0x0b, 0x2e, 0xc6,
	0x50, 0x09, 0x79, 0xc6, 0xbc, 0xff, 0x9b, 0xa8, 0x55, 0x25, 0xfa, 0xbf, 0x7f, 0x08, 0xb8, 0xdc,
	0x8d, 0x61, 0xfa, 0x01, 0xec, 0x97, 0x5b, 0xc7, 0x03, 0x70, 0xa5, 0xa0, 0x61, 0x2c, 0x63, 0x9e,
	0xd1, 0xc4, 0x5e, 0xf5, 0xf1, 0x4a, 0xd1, 0xe1, 0x32, 0x5e, 0x96, 0x0e, 0x76, 0x48, 0x59, 0xda,
	0x77, 0x60, 0x4f, 0x98, 0x88, 0xff, 0x15, 0xc1, 0xd1, 0x16, 0x15, 0x3e, 0x06, 0x98, 0x08, 0x7e,
	0x9b, 0xb0, 0x74, 0xf9, 0xd6, 0x8e, 0x45, 0x2e, 0x42, 0xfc, 0x14, 0x2a, 0x01, 0x0f, 0xe7, 0xb7,
	0x3f, 0xf9, 0x63, 0x23, 0xaf, 0x78, 0xc8, 0x88, 0xa6, 0x2b, 0x59, 0x48, 0x25, 0xd5, 0x06, 0xfc,
	0x4d, 0xf6, 0x9a, 0x4a, 0x4a, 0x34, 0xdd, 0xff, 0x82, 0xe0, 0xde, 0x8a, 0xa7, 0xf8, 0x19, 0xec,
	0xe6, 0x52, 0xc4, 0x59, 0x64, 0xad, 0x68, 0xae, 0xfb, 0x7f, 0xad, 0xe3, 0x73, 0xc5, 0x60, 0x87,
	0x58, 0x05, 0x7e, 0x01, 0xbb, 0x66, 0xc6, 0xbd, 0x9a, 0xd6, 0x3e, 0xe9, 0x6c, 0x18, 0xff, 0xb7,
	0x82, 0x47, 0x82, 0xe5, 0x39, 0x61, 0x13, 0x2e, 0xa4, 0xea, 0x45, 0x65, 0x30, 0xc1, 0x3e, 0x2c,
	0xdf, 0xdf, 0xef, 0xc2, 0xfd, 0x0d, 0xe5, 0xb0, 0x07, 0x7b, 0x29, 0xcb, 0x73, 0x1a, 0x31, 0xdd,
	0xa1, 0x43, 0xe6, 0x47, 0xff, 0x1d, 0x1c, 0x6e, 0xba, 0xaa, 0x72, 0x5c, 0xc6, 0x29, 0xbb, 0x49,
	0xe2, 0x34, 0x96, 0x5a, 0x84, 0x88, 0xa3, 0x90, 0x2b, 0x05, 0xa8, 0xf5, 0x4a, 0x59, 0xca, 0xc5,
	0xd4, 0x12, 0x6a, 0x9a, 0xe0, 0x1a, 0x4c, 0x53, 0xfc, 0xf3, 0xf5, 0xcc, 0xca, 0x7b, 0x5c, 0x87,
	0x6a, 0x42, 0xb3, 0xa8, 0x50, 0xcd, 0xd8, 0xad, 0x9d, 0x9f, 0xd5, 0x48, 0x2e, 0x1e, 0xd2, 0x31,
	0xaf, 0xd4, 0xfb, 0x86, 0xec, 0xf4, 0x5d, 0x33, 0xf1, 0x31, 0x0e, 0x18, 0xbe, 0x04, 0x67, 0xb1,
	0x76, 0xf8, 0x78, 0xc5, 0xae, 0xdf, 0xf7, 0xb9, 0xde, 0xd8, 0x16, 0xb6, 0xc6, 0xbc, 0x01, 0x58,
	0xce, 0x3b, 0x5e, 0x65, 0xaf, 0xad, 0x65, 0xfd, 0xd1, 0xd6, 0xb8, 0x49, 0xd7, 0x42, 0xfd, 0xb3,
	0xef, 0xb3, 0x06, 0xfa, 0x31, 0x6b, 0xa0, 0x9f, 0xb3, 0x06, 0x7a, 0xdf, 0x8a, 0x62, 0x39, 0x2a,
	0x6e, 0x3b, 0x01, 0x4f, 0xcd, 0x57, 0xcd, 0xfc, 0xb6, 0xb3, 0xa8, 0x1d, 0xf1, 0x6e, 0xe9, 0xd3,
	0xf7, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x25, 0xcf, 0x8b, 0x24, 0x28, 0x05, 0x00, 0x00,
}
