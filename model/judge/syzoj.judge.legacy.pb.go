// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.judge.legacy.proto

package judge // import "github.com/syzoj/syzoj-ng-go/model/judge"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_Waiting TaskStatus = 0
	TaskStatus_Running TaskStatus = 1
	TaskStatus_Done    TaskStatus = 2
	TaskStatus_Failed  TaskStatus = 3
	TaskStatus_Skipped TaskStatus = 4
)

var TaskStatus_name = map[int32]string{
	0: "Waiting",
	1: "Running",
	2: "Done",
	3: "Failed",
	4: "Skipped",
}
var TaskStatus_value = map[string]int32{
	"Waiting": 0,
	"Running": 1,
	"Done":    2,
	"Failed":  3,
	"Skipped": 4,
}

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}
func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (x *TaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskStatus_value, data, "TaskStatus")
	if err != nil {
		return err
	}
	*x = TaskStatus(value)
	return nil
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{0}
}

type ProgressReportType int32

const (
	ProgressReportType_Started  ProgressReportType = 1
	ProgressReportType_Compiled ProgressReportType = 2
	ProgressReportType_Progress ProgressReportType = 3
	ProgressReportType_Finished ProgressReportType = 4
	ProgressReportType_Reported ProgressReportType = 5
)

var ProgressReportType_name = map[int32]string{
	1: "Started",
	2: "Compiled",
	3: "Progress",
	4: "Finished",
	5: "Reported",
}
var ProgressReportType_value = map[string]int32{
	"Started":  1,
	"Compiled": 2,
	"Progress": 3,
	"Finished": 4,
	"Reported": 5,
}

func (x ProgressReportType) Enum() *ProgressReportType {
	p := new(ProgressReportType)
	*p = x
	return p
}
func (x ProgressReportType) String() string {
	return proto.EnumName(ProgressReportType_name, int32(x))
}
func (x *ProgressReportType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProgressReportType_value, data, "ProgressReportType")
	if err != nil {
		return err
	}
	*x = ProgressReportType(value)
	return nil
}
func (ProgressReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{1}
}

type TestcaseResultType int32

const (
	TestcaseResultType_Accepted            TestcaseResultType = 1
	TestcaseResultType_WrongAnswer         TestcaseResultType = 2
	TestcaseResultType_PartiallyCorrect    TestcaseResultType = 3
	TestcaseResultType_MemoryLimitExceeded TestcaseResultType = 4
	TestcaseResultType_TimeLimitExceeded   TestcaseResultType = 5
	TestcaseResultType_OutputLimitExceeded TestcaseResultType = 6
	TestcaseResultType_FileError           TestcaseResultType = 7
	TestcaseResultType_RuntimeError        TestcaseResultType = 8
	TestcaseResultType_JudgementFailed     TestcaseResultType = 9
	TestcaseResultType_InvalidInteraction  TestcaseResultType = 10
)

var TestcaseResultType_name = map[int32]string{
	1:  "Accepted",
	2:  "WrongAnswer",
	3:  "PartiallyCorrect",
	4:  "MemoryLimitExceeded",
	5:  "TimeLimitExceeded",
	6:  "OutputLimitExceeded",
	7:  "FileError",
	8:  "RuntimeError",
	9:  "JudgementFailed",
	10: "InvalidInteraction",
}
var TestcaseResultType_value = map[string]int32{
	"Accepted":            1,
	"WrongAnswer":         2,
	"PartiallyCorrect":    3,
	"MemoryLimitExceeded": 4,
	"TimeLimitExceeded":   5,
	"OutputLimitExceeded": 6,
	"FileError":           7,
	"RuntimeError":        8,
	"JudgementFailed":     9,
	"InvalidInteraction":  10,
}

func (x TestcaseResultType) Enum() *TestcaseResultType {
	p := new(TestcaseResultType)
	*p = x
	return p
}
func (x TestcaseResultType) String() string {
	return proto.EnumName(TestcaseResultType_name, int32(x))
}
func (x *TestcaseResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestcaseResultType_value, data, "TestcaseResultType")
	if err != nil {
		return err
	}
	*x = TestcaseResultType(value)
	return nil
}
func (TestcaseResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{2}
}

type ProgressReportData struct {
	TaskId               *string             `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Type                 *ProgressReportType `protobuf:"varint,2,opt,name=type,enum=syzoj.judge.legacy.ProgressReportType" json:"type,omitempty"`
	Progress             *Result             `protobuf:"bytes,3,opt,name=progress" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProgressReportData) Reset()         { *m = ProgressReportData{} }
func (m *ProgressReportData) String() string { return proto.CompactTextString(m) }
func (*ProgressReportData) ProtoMessage()    {}
func (*ProgressReportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{0}
}
func (m *ProgressReportData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgressReportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgressReportData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProgressReportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressReportData.Merge(dst, src)
}
func (m *ProgressReportData) XXX_Size() int {
	return m.Size()
}
func (m *ProgressReportData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressReportData.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressReportData proto.InternalMessageInfo

func (m *ProgressReportData) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *ProgressReportData) GetType() ProgressReportType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ProgressReportType_Started
}

func (m *ProgressReportData) GetProgress() *Result {
	if m != nil {
		return m.Progress
	}
	return nil
}

// OverallResult | CompilationResult
type Result struct {
	Status               *TaskStatus  `protobuf:"varint,1,opt,name=status,enum=syzoj.judge.legacy.TaskStatus" json:"status,omitempty"`
	Message              *string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	SystemMessage        *string      `protobuf:"bytes,3,opt,name=system_message,json=systemMessage" json:"system_message,omitempty"`
	Compile              *Result      `protobuf:"bytes,4,opt,name=compile" json:"compile,omitempty"`
	Judge                *JudgeResult `protobuf:"bytes,5,opt,name=judge" json:"judge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{1}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() TaskStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskStatus_Waiting
}

func (m *Result) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Result) GetSystemMessage() string {
	if m != nil && m.SystemMessage != nil {
		return *m.SystemMessage
	}
	return ""
}

func (m *Result) GetCompile() *Result {
	if m != nil {
		return m.Compile
	}
	return nil
}

func (m *Result) GetJudge() *JudgeResult {
	if m != nil {
		return m.Judge
	}
	return nil
}

type JudgeResult struct {
	Subtasks             []*SubtaskResult `protobuf:"bytes,1,rep,name=subtasks" json:"subtasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *JudgeResult) Reset()         { *m = JudgeResult{} }
func (m *JudgeResult) String() string { return proto.CompactTextString(m) }
func (*JudgeResult) ProtoMessage()    {}
func (*JudgeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{2}
}
func (m *JudgeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeResult.Merge(dst, src)
}
func (m *JudgeResult) XXX_Size() int {
	return m.Size()
}
func (m *JudgeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeResult.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeResult proto.InternalMessageInfo

func (m *JudgeResult) GetSubtasks() []*SubtaskResult {
	if m != nil {
		return m.Subtasks
	}
	return nil
}

type SubtaskResult struct {
	Score                *float64          `protobuf:"fixed64,1,opt,name=score" json:"score,omitempty"`
	Cases                []*TestcaseResult `protobuf:"bytes,2,rep,name=cases" json:"cases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubtaskResult) Reset()         { *m = SubtaskResult{} }
func (m *SubtaskResult) String() string { return proto.CompactTextString(m) }
func (*SubtaskResult) ProtoMessage()    {}
func (*SubtaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{3}
}
func (m *SubtaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubtaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubtaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubtaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubtaskResult.Merge(dst, src)
}
func (m *SubtaskResult) XXX_Size() int {
	return m.Size()
}
func (m *SubtaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubtaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubtaskResult proto.InternalMessageInfo

func (m *SubtaskResult) GetScore() float64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *SubtaskResult) GetCases() []*TestcaseResult {
	if m != nil {
		return m.Cases
	}
	return nil
}

type TestcaseResult struct {
	Status               *TaskStatus      `protobuf:"varint,1,opt,name=status,enum=syzoj.judge.legacy.TaskStatus" json:"status,omitempty"`
	Result               *TestcaseDetails `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TestcaseResult) Reset()         { *m = TestcaseResult{} }
func (m *TestcaseResult) String() string { return proto.CompactTextString(m) }
func (*TestcaseResult) ProtoMessage()    {}
func (*TestcaseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{4}
}
func (m *TestcaseResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestcaseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestcaseResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestcaseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestcaseResult.Merge(dst, src)
}
func (m *TestcaseResult) XXX_Size() int {
	return m.Size()
}
func (m *TestcaseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestcaseResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestcaseResult proto.InternalMessageInfo

func (m *TestcaseResult) GetStatus() TaskStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskStatus_Waiting
}

func (m *TestcaseResult) GetResult() *TestcaseDetails {
	if m != nil {
		return m.Result
	}
	return nil
}

type TestcaseDetails struct {
	Type                 *TestcaseResultType `protobuf:"varint,1,opt,name=type,enum=syzoj.judge.legacy.TestcaseResultType" json:"type,omitempty"`
	Time                 *float64            `protobuf:"fixed64,2,opt,name=time" json:"time,omitempty"`
	Memory               *float64            `protobuf:"fixed64,3,opt,name=memory" json:"memory,omitempty"`
	Input                *FileContent        `protobuf:"bytes,4,opt,name=input" json:"input,omitempty"`
	Output               *FileContent        `protobuf:"bytes,5,opt,name=output" json:"output,omitempty"`
	ScoringRate          *float64            `protobuf:"fixed64,6,opt,name=scoring_rate,json=scoringRate" json:"scoring_rate,omitempty"`
	UserOutput           *string             `protobuf:"bytes,7,opt,name=user_output,json=userOutput" json:"user_output,omitempty"`
	UserError            *string             `protobuf:"bytes,8,opt,name=user_error,json=userError" json:"user_error,omitempty"`
	SpjMessage           *string             `protobuf:"bytes,9,opt,name=spj_message,json=spjMessage" json:"spj_message,omitempty"`
	SystemMessage        *string             `protobuf:"bytes,10,opt,name=system_message,json=systemMessage" json:"system_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TestcaseDetails) Reset()         { *m = TestcaseDetails{} }
func (m *TestcaseDetails) String() string { return proto.CompactTextString(m) }
func (*TestcaseDetails) ProtoMessage()    {}
func (*TestcaseDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{5}
}
func (m *TestcaseDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestcaseDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestcaseDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestcaseDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestcaseDetails.Merge(dst, src)
}
func (m *TestcaseDetails) XXX_Size() int {
	return m.Size()
}
func (m *TestcaseDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TestcaseDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TestcaseDetails proto.InternalMessageInfo

func (m *TestcaseDetails) GetType() TestcaseResultType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TestcaseResultType_Accepted
}

func (m *TestcaseDetails) GetTime() float64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TestcaseDetails) GetMemory() float64 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *TestcaseDetails) GetInput() *FileContent {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *TestcaseDetails) GetOutput() *FileContent {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TestcaseDetails) GetScoringRate() float64 {
	if m != nil && m.ScoringRate != nil {
		return *m.ScoringRate
	}
	return 0
}

func (m *TestcaseDetails) GetUserOutput() string {
	if m != nil && m.UserOutput != nil {
		return *m.UserOutput
	}
	return ""
}

func (m *TestcaseDetails) GetUserError() string {
	if m != nil && m.UserError != nil {
		return *m.UserError
	}
	return ""
}

func (m *TestcaseDetails) GetSpjMessage() string {
	if m != nil && m.SpjMessage != nil {
		return *m.SpjMessage
	}
	return ""
}

func (m *TestcaseDetails) GetSystemMessage() string {
	if m != nil && m.SystemMessage != nil {
		return *m.SystemMessage
	}
	return ""
}

type FileContent struct {
	Content              *string  `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileContent) Reset()         { *m = FileContent{} }
func (m *FileContent) String() string { return proto.CompactTextString(m) }
func (*FileContent) ProtoMessage()    {}
func (*FileContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218, []int{6}
}
func (m *FileContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileContent.Merge(dst, src)
}
func (m *FileContent) XXX_Size() int {
	return m.Size()
}
func (m *FileContent) XXX_DiscardUnknown() {
	xxx_messageInfo_FileContent.DiscardUnknown(m)
}

var xxx_messageInfo_FileContent proto.InternalMessageInfo

func (m *FileContent) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *FileContent) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ProgressReportData)(nil), "syzoj.judge.legacy.ProgressReportData")
	proto.RegisterType((*Result)(nil), "syzoj.judge.legacy.Result")
	proto.RegisterType((*JudgeResult)(nil), "syzoj.judge.legacy.JudgeResult")
	proto.RegisterType((*SubtaskResult)(nil), "syzoj.judge.legacy.SubtaskResult")
	proto.RegisterType((*TestcaseResult)(nil), "syzoj.judge.legacy.TestcaseResult")
	proto.RegisterType((*TestcaseDetails)(nil), "syzoj.judge.legacy.TestcaseDetails")
	proto.RegisterType((*FileContent)(nil), "syzoj.judge.legacy.FileContent")
	proto.RegisterEnum("syzoj.judge.legacy.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterEnum("syzoj.judge.legacy.ProgressReportType", ProgressReportType_name, ProgressReportType_value)
	proto.RegisterEnum("syzoj.judge.legacy.TestcaseResultType", TestcaseResultType_name, TestcaseResultType_value)
}
func (m *ProgressReportData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgressReportData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.TaskId)))
		i += copy(dAtA[i:], *m.TaskId)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(*m.Type))
	}
	if m.Progress != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Progress.Size()))
		n1, err := m.Progress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(*m.Status))
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.Message)))
		i += copy(dAtA[i:], *m.Message)
	}
	if m.SystemMessage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.SystemMessage)))
		i += copy(dAtA[i:], *m.SystemMessage)
	}
	if m.Compile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Compile.Size()))
		n2, err := m.Compile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Judge != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Judge.Size()))
		n3, err := m.Judge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subtasks) > 0 {
		for _, msg := range m.Subtasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubtaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubtaskResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Score))))
		i += 8
	}
	if len(m.Cases) > 0 {
		for _, msg := range m.Cases {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestcaseResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestcaseResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(*m.Status))
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Result.Size()))
		n4, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestcaseDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestcaseDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(*m.Type))
	}
	if m.Time != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Time))))
		i += 8
	}
	if m.Memory != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Memory))))
		i += 8
	}
	if m.Input != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Input.Size()))
		n5, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Output != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(m.Output.Size()))
		n6, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ScoringRate != nil {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ScoringRate))))
		i += 8
	}
	if m.UserOutput != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.UserOutput)))
		i += copy(dAtA[i:], *m.UserOutput)
	}
	if m.UserError != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.UserError)))
		i += copy(dAtA[i:], *m.UserError)
	}
	if m.SpjMessage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.SpjMessage)))
		i += copy(dAtA[i:], *m.SpjMessage)
	}
	if m.SystemMessage != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.SystemMessage)))
		i += copy(dAtA[i:], *m.SystemMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojJudgeLegacy(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojJudgeLegacy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProgressReportData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != nil {
		l = len(*m.TaskId)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovSyzojJudgeLegacy(uint64(*m.Type))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovSyzojJudgeLegacy(uint64(*m.Status))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.SystemMessage != nil {
		l = len(*m.SystemMessage)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.Compile != nil {
		l = m.Compile.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.Judge != nil {
		l = m.Judge.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subtasks) > 0 {
		for _, e := range m.Subtasks {
			l = e.Size()
			n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubtaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		n += 9
	}
	if len(m.Cases) > 0 {
		for _, e := range m.Cases {
			l = e.Size()
			n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestcaseResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovSyzojJudgeLegacy(uint64(*m.Status))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestcaseDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovSyzojJudgeLegacy(uint64(*m.Type))
	}
	if m.Time != nil {
		n += 9
	}
	if m.Memory != nil {
		n += 9
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.ScoringRate != nil {
		n += 9
	}
	if m.UserOutput != nil {
		l = len(*m.UserOutput)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.UserError != nil {
		l = len(*m.UserError)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.SpjMessage != nil {
		l = len(*m.SpjMessage)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.SystemMessage != nil {
		l = len(*m.SystemMessage)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSyzojJudgeLegacy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojJudgeLegacy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojJudgeLegacy(x uint64) (n int) {
	return sovSyzojJudgeLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProgressReportData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgressReportData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgressReportData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TaskId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v ProgressReportType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ProgressReportType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Result{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TaskStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemMessage = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compile == nil {
				m.Compile = &Result{}
			}
			if err := m.Compile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Judge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Judge == nil {
				m.Judge = &JudgeResult{}
			}
			if err := m.Judge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtasks = append(m.Subtasks, &SubtaskResult{})
			if err := m.Subtasks[len(m.Subtasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubtaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubtaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubtaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Score = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cases = append(m.Cases, &TestcaseResult{})
			if err := m.Cases[len(m.Cases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestcaseResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestcaseResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestcaseResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TaskStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &TestcaseDetails{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestcaseDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestcaseDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestcaseDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v TestcaseResultType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TestcaseResultType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Time = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Memory = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &FileContent{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &FileContent{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoringRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ScoringRate = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserOutput = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserError = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpjMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SpjMessage = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemMessage = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojJudgeLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojJudgeLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojJudgeLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojJudgeLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojJudgeLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojJudgeLegacy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojJudgeLegacy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojJudgeLegacy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojJudgeLegacy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojJudgeLegacy   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("syzoj.judge.legacy.proto", fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218)
}

var fileDescriptor_syzoj_judge_legacy_bd983fd3e55ea218 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0x4e, 0xfb, 0x67, 0x6c, 0xd7, 0xec, 0xcf, 0xd0, 0x09, 0xc9, 0x08, 0x09, 0x67, 0x63, 0x04,
	0xb2, 0x56, 0x8a, 0x57, 0xb2, 0x20, 0xa0, 0x44, 0x1c, 0xc2, 0x6e, 0x56, 0x5a, 0x94, 0x15, 0xd1,
	0xec, 0x4a, 0x11, 0x5c, 0xac, 0xce, 0x4c, 0x69, 0xd2, 0xde, 0x99, 0xee, 0x51, 0x77, 0x0f, 0x60,
	0xee, 0xbc, 0x01, 0x07, 0xae, 0xbc, 0x0d, 0x47, 0x1e, 0x21, 0x5a, 0xee, 0x3c, 0x03, 0xea, 0xee,
	0x99, 0x65, 0x9d, 0x38, 0x80, 0x72, 0xb1, 0xe6, 0xab, 0xfa, 0xbe, 0xea, 0x72, 0xd7, 0x57, 0x0d,
	0xb1, 0x5e, 0xfd, 0x24, 0x97, 0xb3, 0x65, 0x9d, 0xe5, 0x38, 0x2b, 0x30, 0x67, 0xe9, 0x6a, 0x56,
	0x29, 0x69, 0x24, 0xa5, 0x6f, 0x66, 0x26, 0xbf, 0x11, 0xa0, 0xcf, 0x94, 0xcc, 0x15, 0x6a, 0x9d,
	0x60, 0x25, 0x95, 0x39, 0x62, 0x86, 0xd1, 0x3b, 0x30, 0x30, 0x4c, 0x5f, 0x2c, 0x78, 0x16, 0x93,
	0x3d, 0x32, 0x1d, 0x25, 0x81, 0x85, 0x27, 0x19, 0x7d, 0x08, 0x3d, 0xb3, 0xaa, 0x30, 0xee, 0xec,
	0x91, 0xe9, 0xce, 0xfc, 0x93, 0xd9, 0x86, 0xc3, 0xd6, 0xcb, 0x9d, 0xaf, 0x2a, 0x4c, 0x9c, 0x86,
	0x3e, 0x80, 0x61, 0xd5, 0xe4, 0xe2, 0xee, 0x1e, 0x99, 0x86, 0xf3, 0x0f, 0x36, 0xe9, 0x13, 0xd4,
	0x75, 0x61, 0x92, 0x2b, 0xee, 0xe4, 0x2f, 0x02, 0x81, 0x0f, 0xd2, 0x07, 0x10, 0x68, 0xc3, 0x4c,
	0xad, 0x5d, 0x5b, 0x3b, 0xf3, 0xf1, 0xa6, 0x02, 0xe7, 0x4c, 0x5f, 0x9c, 0x39, 0x56, 0xd2, 0xb0,
	0x69, 0x0c, 0x83, 0x12, 0xb5, 0x66, 0xb9, 0xef, 0x7c, 0x94, 0xb4, 0x90, 0x7e, 0x0c, 0x3b, 0x7a,
	0xa5, 0x0d, 0x96, 0x8b, 0x96, 0xd0, 0x75, 0x84, 0x6d, 0x1f, 0x3d, 0x6d, 0x68, 0x9f, 0xc2, 0x20,
	0x95, 0x65, 0xc5, 0x0b, 0x8c, 0x7b, 0xff, 0xd9, 0x7a, 0x4b, 0xa5, 0x9f, 0x41, 0xdf, 0xe5, 0xe3,
	0xbe, 0xd3, 0xdc, 0xdd, 0xa4, 0xf9, 0xda, 0x82, 0x46, 0xe8, 0xd9, 0x93, 0xa7, 0x10, 0x5e, 0x8b,
	0xd2, 0x2f, 0x61, 0xa8, 0xeb, 0x17, 0x76, 0x00, 0xf6, 0x6f, 0x77, 0xa7, 0xe1, 0xfc, 0xde, 0xa6,
	0x42, 0x67, 0x9e, 0xd3, 0x5e, 0x5f, 0x2b, 0x99, 0x2c, 0x60, 0x7b, 0x2d, 0x45, 0x6f, 0x41, 0x5f,
	0xa7, 0x52, 0xa1, 0xbb, 0x43, 0x92, 0x78, 0x40, 0xbf, 0x80, 0x7e, 0xca, 0x34, 0xea, 0xb8, 0xe3,
	0x8e, 0x98, 0x6c, 0xbc, 0x59, 0xd4, 0xc6, 0x92, 0xda, 0x76, 0x9d, 0x60, 0xf2, 0x33, 0x81, 0x9d,
	0xf5, 0xcc, 0x3b, 0xcf, 0xe9, 0x11, 0x04, 0xca, 0x55, 0x70, 0x63, 0x0a, 0xe7, 0x1f, 0xfd, 0x5b,
	0x17, 0x47, 0x68, 0x18, 0x2f, 0x74, 0xd2, 0x48, 0x26, 0xbf, 0x74, 0x61, 0xf7, 0xb5, 0xdc, 0x95,
	0x5f, 0xc9, 0xdb, 0xfd, 0xba, 0xde, 0xfa, 0x35, 0xbf, 0x52, 0xe8, 0x19, 0x5e, 0x7a, 0xc7, 0x90,
	0xc4, 0x7d, 0xd3, 0xdb, 0x10, 0x94, 0x58, 0x4a, 0xb5, 0x72, 0x36, 0x21, 0x49, 0x83, 0xec, 0xa4,
	0xb9, 0xa8, 0x6a, 0xd3, 0xb8, 0x63, 0xe3, 0xa4, 0x8f, 0x79, 0x81, 0x87, 0x52, 0x18, 0x14, 0x26,
	0xf1, 0x6c, 0xfa, 0x39, 0x04, 0xb2, 0x36, 0x56, 0xd7, 0xff, 0x7f, 0xba, 0x86, 0x4e, 0xef, 0xc1,
	0x96, 0x1d, 0x1b, 0x17, 0xf9, 0x42, 0x31, 0x83, 0x71, 0xe0, 0xba, 0x09, 0x9b, 0x58, 0xc2, 0x0c,
	0xd2, 0xbb, 0x10, 0xd6, 0x1a, 0xd5, 0xa2, 0x39, 0x60, 0xe0, 0x6c, 0x0d, 0x36, 0xf4, 0x8d, 0xaf,
	0xf1, 0x21, 0x38, 0xb4, 0x40, 0xa5, 0xa4, 0x8a, 0x87, 0x2e, 0x3f, 0xb2, 0x91, 0x27, 0x36, 0x60,
	0xf5, 0xba, 0x5a, 0x5e, 0xad, 0xc5, 0xc8, 0xeb, 0x75, 0xb5, 0x3c, 0x7d, 0xeb, 0xea, 0xc0, 0x86,
	0xd5, 0x99, 0x3c, 0x82, 0xf0, 0xda, 0x3f, 0xb0, 0xab, 0x98, 0xfa, 0xcf, 0xe6, 0x69, 0x69, 0xa1,
	0xbd, 0x6f, 0xc1, 0xca, 0x76, 0x43, 0xdd, 0xf7, 0xfe, 0x09, 0xc0, 0x3f, 0x36, 0xa1, 0x21, 0x0c,
	0x9e, 0x33, 0x6e, 0xb8, 0xc8, 0xa3, 0x1b, 0x16, 0x24, 0xb5, 0x10, 0x16, 0x10, 0x3a, 0x84, 0xde,
	0x91, 0x14, 0x18, 0x75, 0x28, 0x40, 0x70, 0xcc, 0x78, 0x81, 0x59, 0xd4, 0xb5, 0x94, 0xb3, 0x0b,
	0x5e, 0x55, 0x98, 0x45, 0xbd, 0xfd, 0x6f, 0x5f, 0x7f, 0xe9, 0xec, 0xa8, 0x1d, 0xc5, 0x30, 0x65,
	0x30, 0x8b, 0x08, 0xdd, 0x82, 0xe1, 0xa1, 0x5f, 0xdd, 0x2c, 0xea, 0x58, 0xd4, 0x0a, 0xa2, 0xae,
	0x45, 0xc7, 0x5c, 0x70, 0xfd, 0xd2, 0x16, 0xb3, 0xc8, 0x17, 0xc1, 0x2c, 0xea, 0xef, 0xbf, 0x22,
	0x40, 0xdf, 0xb4, 0x91, 0x25, 0x3d, 0x4e, 0x53, 0xac, 0x7c, 0xf1, 0x5d, 0x08, 0x9f, 0x2b, 0x29,
	0xf2, 0xc7, 0x42, 0xff, 0x80, 0x2a, 0xea, 0xd0, 0x5b, 0x10, 0x3d, 0x63, 0xca, 0x70, 0x56, 0x14,
	0xab, 0x43, 0xa9, 0x14, 0xa6, 0x26, 0xea, 0xd2, 0x3b, 0x70, 0xf3, 0xd4, 0x79, 0xea, 0x29, 0x2f,
	0xb9, 0x79, 0xf2, 0x63, 0x8a, 0x98, 0xb9, 0x23, 0xdf, 0x87, 0xf7, 0xce, 0x79, 0x89, 0xeb, 0xe1,
	0xbe, 0xe5, 0xfb, 0x79, 0xae, 0x27, 0x02, 0xba, 0x0d, 0x23, 0x7b, 0xef, 0x6e, 0x98, 0xd1, 0x80,
	0x46, 0xb0, 0x95, 0xd4, 0xc2, 0x9a, 0xd8, 0x47, 0x86, 0xf4, 0x26, 0xec, 0xba, 0x67, 0xa6, 0x44,
	0x61, 0x9a, 0x2b, 0x1b, 0xd1, 0xdb, 0x40, 0x4f, 0xc4, 0xf7, 0xac, 0xe0, 0xd9, 0x89, 0x30, 0xa8,
	0x58, 0x6a, 0xb8, 0x14, 0x11, 0x7c, 0xf5, 0xf0, 0xf7, 0xcb, 0x31, 0xf9, 0xe3, 0x72, 0x4c, 0x5e,
	0x5d, 0x8e, 0xc9, 0xaf, 0x7f, 0x8e, 0x6f, 0x7c, 0x37, 0xcd, 0xb9, 0x79, 0x59, 0xbf, 0x98, 0xa5,
	0xb2, 0x3c, 0x70, 0xae, 0xf5, 0xbf, 0xf7, 0x45, 0x7e, 0x3f, 0x97, 0x07, 0xa5, 0xcc, 0xb0, 0x38,
	0x70, 0x3e, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xb4, 0x89, 0xe1, 0x93, 0x06, 0x00, 0x00,
}
