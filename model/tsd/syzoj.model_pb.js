/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.syzoj.model.DeviceInfo', null, global);
goog.exportSymbol('proto.syzoj.model.MarkdownLatexDocument', null, global);
goog.exportSymbol('proto.syzoj.model.Problem', null, global);
goog.exportSymbol('proto.syzoj.model.ProblemJudge', null, global);
goog.exportSymbol('proto.syzoj.model.ProblemSource', null, global);
goog.exportSymbol('proto.syzoj.model.ProblemStatement', null, global);
goog.exportSymbol('proto.syzoj.model.TraditionalJudgeCode', null, global);
goog.exportSymbol('proto.syzoj.model.TraditionalJudgeData', null, global);
goog.exportSymbol('proto.syzoj.model.UserAuth', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.UserAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.UserAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.UserAuth.displayName = 'proto.syzoj.model.UserAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.UserAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.UserAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.UserAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.UserAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    passwordHash: msg.getPasswordHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.UserAuth}
 */
proto.syzoj.model.UserAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.UserAuth;
  return proto.syzoj.model.UserAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.UserAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.UserAuth}
 */
proto.syzoj.model.UserAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswordHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.UserAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.UserAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.UserAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.UserAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes password_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.syzoj.model.UserAuth.prototype.getPasswordHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes password_hash = 1;
 * This is a type-conversion wrapper around `getPasswordHash()`
 * @return {string}
 */
proto.syzoj.model.UserAuth.prototype.getPasswordHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswordHash()));
};


/**
 * optional bytes password_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswordHash()`
 * @return {!Uint8Array}
 */
proto.syzoj.model.UserAuth.prototype.getPasswordHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswordHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.syzoj.model.UserAuth.prototype.setPasswordHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.UserAuth.prototype.clearPasswordHash = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.UserAuth.prototype.hasPasswordHash = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.DeviceInfo.displayName = 'proto.syzoj.model.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getField(msg, 1),
    userAgent: jspb.Message.getField(msg, 16),
    remoteAddr: jspb.Message.getField(msg, 17)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.DeviceInfo}
 */
proto.syzoj.model.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.DeviceInfo;
  return proto.syzoj.model.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.DeviceInfo}
 */
proto.syzoj.model.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.syzoj.model.DeviceInfo.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.syzoj.model.DeviceInfo.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.DeviceInfo.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.DeviceInfo.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_agent = 16;
 * @return {string}
 */
proto.syzoj.model.DeviceInfo.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.syzoj.model.DeviceInfo.prototype.setUserAgent = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.syzoj.model.DeviceInfo.prototype.clearUserAgent = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.DeviceInfo.prototype.hasUserAgent = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string remote_addr = 17;
 * @return {string}
 */
proto.syzoj.model.DeviceInfo.prototype.getRemoteAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.syzoj.model.DeviceInfo.prototype.setRemoteAddr = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.syzoj.model.DeviceInfo.prototype.clearRemoteAddr = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.DeviceInfo.prototype.hasRemoteAddr = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.Problem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syzoj.model.Problem.repeatedFields_, null);
};
goog.inherits(proto.syzoj.model.Problem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.Problem.displayName = 'proto.syzoj.model.Problem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syzoj.model.Problem.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.Problem.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.Problem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.Problem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.Problem.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    statement: (f = msg.getStatement()) && proto.syzoj.model.ProblemStatement.toObject(includeInstance, f),
    sourceList: jspb.Message.toObjectList(msg.getSourceList(),
    proto.syzoj.model.ProblemSource.toObject, includeInstance),
    judge: (f = msg.getJudge()) && proto.syzoj.model.ProblemJudge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.Problem}
 */
proto.syzoj.model.Problem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.Problem;
  return proto.syzoj.model.Problem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.Problem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.Problem}
 */
proto.syzoj.model.Problem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = new proto.syzoj.model.ProblemStatement;
      reader.readMessage(value,proto.syzoj.model.ProblemStatement.deserializeBinaryFromReader);
      msg.setStatement(value);
      break;
    case 3:
      var value = new proto.syzoj.model.ProblemSource;
      reader.readMessage(value,proto.syzoj.model.ProblemSource.deserializeBinaryFromReader);
      msg.addSource(value);
      break;
    case 4:
      var value = new proto.syzoj.model.ProblemJudge;
      reader.readMessage(value,proto.syzoj.model.ProblemJudge.deserializeBinaryFromReader);
      msg.setJudge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.Problem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.Problem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.Problem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.Problem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syzoj.model.ProblemStatement.serializeBinaryToWriter
    );
  }
  f = message.getSourceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.syzoj.model.ProblemSource.serializeBinaryToWriter
    );
  }
  f = message.getJudge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.syzoj.model.ProblemJudge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.syzoj.model.Problem.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.syzoj.model.Problem.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.Problem.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.Problem.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProblemStatement statement = 2;
 * @return {?proto.syzoj.model.ProblemStatement}
 */
proto.syzoj.model.Problem.prototype.getStatement = function() {
  return /** @type{?proto.syzoj.model.ProblemStatement} */ (
    jspb.Message.getWrapperField(this, proto.syzoj.model.ProblemStatement, 2));
};


/** @param {?proto.syzoj.model.ProblemStatement|undefined} value */
proto.syzoj.model.Problem.prototype.setStatement = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.syzoj.model.Problem.prototype.clearStatement = function() {
  this.setStatement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.Problem.prototype.hasStatement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ProblemSource source = 3;
 * @return {!Array<!proto.syzoj.model.ProblemSource>}
 */
proto.syzoj.model.Problem.prototype.getSourceList = function() {
  return /** @type{!Array<!proto.syzoj.model.ProblemSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syzoj.model.ProblemSource, 3));
};


/** @param {!Array<!proto.syzoj.model.ProblemSource>} value */
proto.syzoj.model.Problem.prototype.setSourceList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.syzoj.model.ProblemSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syzoj.model.ProblemSource}
 */
proto.syzoj.model.Problem.prototype.addSource = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.syzoj.model.ProblemSource, opt_index);
};


proto.syzoj.model.Problem.prototype.clearSourceList = function() {
  this.setSourceList([]);
};


/**
 * optional ProblemJudge judge = 4;
 * @return {?proto.syzoj.model.ProblemJudge}
 */
proto.syzoj.model.Problem.prototype.getJudge = function() {
  return /** @type{?proto.syzoj.model.ProblemJudge} */ (
    jspb.Message.getWrapperField(this, proto.syzoj.model.ProblemJudge, 4));
};


/** @param {?proto.syzoj.model.ProblemJudge|undefined} value */
proto.syzoj.model.Problem.prototype.setJudge = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.syzoj.model.Problem.prototype.clearJudge = function() {
  this.setJudge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.Problem.prototype.hasJudge = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.ProblemJudge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.syzoj.model.ProblemJudge.oneofGroups_);
};
goog.inherits(proto.syzoj.model.ProblemJudge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.ProblemJudge.displayName = 'proto.syzoj.model.ProblemJudge';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.syzoj.model.ProblemJudge.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.syzoj.model.ProblemJudge.JudgeCase = {
  JUDGE_NOT_SET: 0,
  TRADITIONAL: 1
};

/**
 * @return {proto.syzoj.model.ProblemJudge.JudgeCase}
 */
proto.syzoj.model.ProblemJudge.prototype.getJudgeCase = function() {
  return /** @type {proto.syzoj.model.ProblemJudge.JudgeCase} */(jspb.Message.computeOneofCase(this, proto.syzoj.model.ProblemJudge.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.ProblemJudge.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.ProblemJudge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.ProblemJudge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemJudge.toObject = function(includeInstance, msg) {
  var f, obj = {
    traditional: (f = msg.getTraditional()) && proto.syzoj.model.TraditionalJudgeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.ProblemJudge}
 */
proto.syzoj.model.ProblemJudge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.ProblemJudge;
  return proto.syzoj.model.ProblemJudge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.ProblemJudge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.ProblemJudge}
 */
proto.syzoj.model.ProblemJudge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syzoj.model.TraditionalJudgeData;
      reader.readMessage(value,proto.syzoj.model.TraditionalJudgeData.deserializeBinaryFromReader);
      msg.setTraditional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.ProblemJudge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.ProblemJudge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.ProblemJudge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemJudge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraditional();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.syzoj.model.TraditionalJudgeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional TraditionalJudgeData traditional = 1;
 * @return {?proto.syzoj.model.TraditionalJudgeData}
 */
proto.syzoj.model.ProblemJudge.prototype.getTraditional = function() {
  return /** @type{?proto.syzoj.model.TraditionalJudgeData} */ (
    jspb.Message.getWrapperField(this, proto.syzoj.model.TraditionalJudgeData, 1));
};


/** @param {?proto.syzoj.model.TraditionalJudgeData|undefined} value */
proto.syzoj.model.ProblemJudge.prototype.setTraditional = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.syzoj.model.ProblemJudge.oneofGroups_[0], value);
};


proto.syzoj.model.ProblemJudge.prototype.clearTraditional = function() {
  this.setTraditional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemJudge.prototype.hasTraditional = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.ProblemSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.ProblemSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.ProblemSource.displayName = 'proto.syzoj.model.ProblemSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.ProblemSource.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.ProblemSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.ProblemSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getField(msg, 1),
    siteName: jspb.Message.getField(msg, 2),
    siteProblemTitle: jspb.Message.getField(msg, 3),
    contestName: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.ProblemSource}
 */
proto.syzoj.model.ProblemSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.ProblemSource;
  return proto.syzoj.model.ProblemSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.ProblemSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.ProblemSource}
 */
proto.syzoj.model.ProblemSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiteName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiteProblemTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContestName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.ProblemSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.ProblemSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.ProblemSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.syzoj.model.ProblemSource.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.syzoj.model.ProblemSource.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.ProblemSource.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemSource.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string site_name = 2;
 * @return {string}
 */
proto.syzoj.model.ProblemSource.prototype.getSiteName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.syzoj.model.ProblemSource.prototype.setSiteName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.syzoj.model.ProblemSource.prototype.clearSiteName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemSource.prototype.hasSiteName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string site_problem_title = 3;
 * @return {string}
 */
proto.syzoj.model.ProblemSource.prototype.getSiteProblemTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.syzoj.model.ProblemSource.prototype.setSiteProblemTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.syzoj.model.ProblemSource.prototype.clearSiteProblemTitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemSource.prototype.hasSiteProblemTitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string contest_name = 4;
 * @return {string}
 */
proto.syzoj.model.ProblemSource.prototype.getContestName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.syzoj.model.ProblemSource.prototype.setContestName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.syzoj.model.ProblemSource.prototype.clearContestName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemSource.prototype.hasContestName = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.ProblemStatement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.syzoj.model.ProblemStatement.oneofGroups_);
};
goog.inherits(proto.syzoj.model.ProblemStatement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.ProblemStatement.displayName = 'proto.syzoj.model.ProblemStatement';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.syzoj.model.ProblemStatement.oneofGroups_ = [[16]];

/**
 * @enum {number}
 */
proto.syzoj.model.ProblemStatement.StatementCase = {
  STATEMENT_NOT_SET: 0,
  MARKDOWN: 16
};

/**
 * @return {proto.syzoj.model.ProblemStatement.StatementCase}
 */
proto.syzoj.model.ProblemStatement.prototype.getStatementCase = function() {
  return /** @type {proto.syzoj.model.ProblemStatement.StatementCase} */(jspb.Message.computeOneofCase(this, proto.syzoj.model.ProblemStatement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.ProblemStatement.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.ProblemStatement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.ProblemStatement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemStatement.toObject = function(includeInstance, msg) {
  var f, obj = {
    markdown: (f = msg.getMarkdown()) && proto.syzoj.model.MarkdownLatexDocument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.ProblemStatement}
 */
proto.syzoj.model.ProblemStatement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.ProblemStatement;
  return proto.syzoj.model.ProblemStatement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.ProblemStatement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.ProblemStatement}
 */
proto.syzoj.model.ProblemStatement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 16:
      var value = new proto.syzoj.model.MarkdownLatexDocument;
      reader.readMessage(value,proto.syzoj.model.MarkdownLatexDocument.deserializeBinaryFromReader);
      msg.setMarkdown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.ProblemStatement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.ProblemStatement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.ProblemStatement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.ProblemStatement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarkdown();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.syzoj.model.MarkdownLatexDocument.serializeBinaryToWriter
    );
  }
};


/**
 * optional MarkdownLatexDocument markdown = 16;
 * @return {?proto.syzoj.model.MarkdownLatexDocument}
 */
proto.syzoj.model.ProblemStatement.prototype.getMarkdown = function() {
  return /** @type{?proto.syzoj.model.MarkdownLatexDocument} */ (
    jspb.Message.getWrapperField(this, proto.syzoj.model.MarkdownLatexDocument, 16));
};


/** @param {?proto.syzoj.model.MarkdownLatexDocument|undefined} value */
proto.syzoj.model.ProblemStatement.prototype.setMarkdown = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.syzoj.model.ProblemStatement.oneofGroups_[0], value);
};


proto.syzoj.model.ProblemStatement.prototype.clearMarkdown = function() {
  this.setMarkdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.ProblemStatement.prototype.hasMarkdown = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.MarkdownLatexDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.MarkdownLatexDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.MarkdownLatexDocument.displayName = 'proto.syzoj.model.MarkdownLatexDocument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.MarkdownLatexDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.MarkdownLatexDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.MarkdownLatexDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.MarkdownLatexDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.MarkdownLatexDocument}
 */
proto.syzoj.model.MarkdownLatexDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.MarkdownLatexDocument;
  return proto.syzoj.model.MarkdownLatexDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.MarkdownLatexDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.MarkdownLatexDocument}
 */
proto.syzoj.model.MarkdownLatexDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.MarkdownLatexDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.MarkdownLatexDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.MarkdownLatexDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.MarkdownLatexDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.syzoj.model.MarkdownLatexDocument.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.syzoj.model.MarkdownLatexDocument.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.MarkdownLatexDocument.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.MarkdownLatexDocument.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.TraditionalJudgeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.TraditionalJudgeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.TraditionalJudgeData.displayName = 'proto.syzoj.model.TraditionalJudgeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.TraditionalJudgeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.TraditionalJudgeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.TraditionalJudgeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeLimit: jspb.Message.getField(msg, 16),
    memoryLimit: jspb.Message.getField(msg, 17)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.TraditionalJudgeData}
 */
proto.syzoj.model.TraditionalJudgeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.TraditionalJudgeData;
  return proto.syzoj.model.TraditionalJudgeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.TraditionalJudgeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.TraditionalJudgeData}
 */
proto.syzoj.model.TraditionalJudgeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeLimit(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemoryLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.TraditionalJudgeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.TraditionalJudgeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.TraditionalJudgeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt64(
      17,
      f
    );
  }
};


/**
 * optional int64 time_limit = 16;
 * @return {number}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.getTimeLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.syzoj.model.TraditionalJudgeData.prototype.setTimeLimit = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.syzoj.model.TraditionalJudgeData.prototype.clearTimeLimit = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.hasTimeLimit = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 memory_limit = 17;
 * @return {number}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.getMemoryLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.syzoj.model.TraditionalJudgeData.prototype.setMemoryLimit = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.syzoj.model.TraditionalJudgeData.prototype.clearMemoryLimit = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.TraditionalJudgeData.prototype.hasMemoryLimit = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syzoj.model.TraditionalJudgeCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syzoj.model.TraditionalJudgeCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.syzoj.model.TraditionalJudgeCode.displayName = 'proto.syzoj.model.TraditionalJudgeCode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.toObject = function(opt_includeInstance) {
  return proto.syzoj.model.TraditionalJudgeCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syzoj.model.TraditionalJudgeCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.TraditionalJudgeCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getField(msg, 1),
    code: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syzoj.model.TraditionalJudgeCode}
 */
proto.syzoj.model.TraditionalJudgeCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syzoj.model.TraditionalJudgeCode;
  return proto.syzoj.model.TraditionalJudgeCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syzoj.model.TraditionalJudgeCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syzoj.model.TraditionalJudgeCode}
 */
proto.syzoj.model.TraditionalJudgeCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syzoj.model.TraditionalJudgeCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syzoj.model.TraditionalJudgeCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syzoj.model.TraditionalJudgeCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.syzoj.model.TraditionalJudgeCode.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.syzoj.model.TraditionalJudgeCode.prototype.clearLanguage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.syzoj.model.TraditionalJudgeCode.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.syzoj.model.TraditionalJudgeCode.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.syzoj.model.TraditionalJudgeCode.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.syzoj.model);
