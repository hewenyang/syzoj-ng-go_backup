// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.service.problem.rpc.proto

package rpc // import "github.com/syzoj/syzoj-ng-go/service/problem/rpc"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/syzoj/syzoj-ng-go/model/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Error int32

const (
	Error_Unknown         Error = 0
	Error_BadRequest      Error = 1
	Error_ProblemNotFound Error = 2
)

var Error_name = map[int32]string{
	0: "Unknown",
	1: "BadRequest",
	2: "ProblemNotFound",
}
var Error_value = map[string]int32{
	"Unknown":         0,
	"BadRequest":      1,
	"ProblemNotFound": 2,
}

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}
func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (x *Error) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_value, data, "Error")
	if err != nil {
		return err
	}
	*x = Error(value)
	return nil
}
func (Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{0}
}

type CreateProblemRequest struct {
	Title                *string  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProblemRequest) Reset()         { *m = CreateProblemRequest{} }
func (m *CreateProblemRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProblemRequest) ProtoMessage()    {}
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{0}
}
func (m *CreateProblemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateProblemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProblemRequest.Merge(dst, src)
}
func (m *CreateProblemRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProblemRequest proto.InternalMessageInfo

func (m *CreateProblemRequest) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

type CreateProblemResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.problem.rpc.Error" json:"error,omitempty"`
	ProblemId            *string  `protobuf:"bytes,2,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProblemResponse) Reset()         { *m = CreateProblemResponse{} }
func (m *CreateProblemResponse) String() string { return proto.CompactTextString(m) }
func (*CreateProblemResponse) ProtoMessage()    {}
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{1}
}
func (m *CreateProblemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateProblemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateProblemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateProblemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProblemResponse.Merge(dst, src)
}
func (m *CreateProblemResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateProblemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProblemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProblemResponse proto.InternalMessageInfo

func (m *CreateProblemResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *CreateProblemResponse) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

type GetProblemRequest struct {
	ProblemId            *string  `protobuf:"bytes,1,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProblemRequest) Reset()         { *m = GetProblemRequest{} }
func (m *GetProblemRequest) String() string { return proto.CompactTextString(m) }
func (*GetProblemRequest) ProtoMessage()    {}
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{2}
}
func (m *GetProblemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProblemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProblemRequest.Merge(dst, src)
}
func (m *GetProblemRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProblemRequest proto.InternalMessageInfo

func (m *GetProblemRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

type GetProblemResponse struct {
	Error                *Error                   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.problem.rpc.Error" json:"error,omitempty"`
	Title                *string                  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Statement            *common.ProblemStatement `protobuf:"bytes,3,opt,name=statement" json:"statement,omitempty"`
	TestData             *common.Data             `protobuf:"bytes,4,opt,name=test_data,json=testData" json:"test_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetProblemResponse) Reset()         { *m = GetProblemResponse{} }
func (m *GetProblemResponse) String() string { return proto.CompactTextString(m) }
func (*GetProblemResponse) ProtoMessage()    {}
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{3}
}
func (m *GetProblemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProblemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProblemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetProblemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProblemResponse.Merge(dst, src)
}
func (m *GetProblemResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProblemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProblemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProblemResponse proto.InternalMessageInfo

func (m *GetProblemResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *GetProblemResponse) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *GetProblemResponse) GetStatement() *common.ProblemStatement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *GetProblemResponse) GetTestData() *common.Data {
	if m != nil {
		return m.TestData
	}
	return nil
}

type UpdateProblemStatementRequest struct {
	ProblemId            *string                  `protobuf:"bytes,1,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	Statement            *common.ProblemStatement `protobuf:"bytes,2,opt,name=statement" json:"statement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdateProblemStatementRequest) Reset()         { *m = UpdateProblemStatementRequest{} }
func (m *UpdateProblemStatementRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemStatementRequest) ProtoMessage()    {}
func (*UpdateProblemStatementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{4}
}
func (m *UpdateProblemStatementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProblemStatementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProblemStatementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateProblemStatementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemStatementRequest.Merge(dst, src)
}
func (m *UpdateProblemStatementRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProblemStatementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemStatementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemStatementRequest proto.InternalMessageInfo

func (m *UpdateProblemStatementRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

func (m *UpdateProblemStatementRequest) GetStatement() *common.ProblemStatement {
	if m != nil {
		return m.Statement
	}
	return nil
}

type UpdateProblemStatementResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.problem.rpc.Error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProblemStatementResponse) Reset()         { *m = UpdateProblemStatementResponse{} }
func (m *UpdateProblemStatementResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemStatementResponse) ProtoMessage()    {}
func (*UpdateProblemStatementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{5}
}
func (m *UpdateProblemStatementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProblemStatementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProblemStatementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateProblemStatementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemStatementResponse.Merge(dst, src)
}
func (m *UpdateProblemStatementResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProblemStatementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemStatementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemStatementResponse proto.InternalMessageInfo

func (m *UpdateProblemStatementResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

type UpdateProblemTestDataRequest struct {
	ProblemId            *string      `protobuf:"bytes,1,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	TestData             *common.Data `protobuf:"bytes,2,opt,name=test_data,json=testData" json:"test_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateProblemTestDataRequest) Reset()         { *m = UpdateProblemTestDataRequest{} }
func (m *UpdateProblemTestDataRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemTestDataRequest) ProtoMessage()    {}
func (*UpdateProblemTestDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{6}
}
func (m *UpdateProblemTestDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProblemTestDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProblemTestDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateProblemTestDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemTestDataRequest.Merge(dst, src)
}
func (m *UpdateProblemTestDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProblemTestDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemTestDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemTestDataRequest proto.InternalMessageInfo

func (m *UpdateProblemTestDataRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

func (m *UpdateProblemTestDataRequest) GetTestData() *common.Data {
	if m != nil {
		return m.TestData
	}
	return nil
}

type UpdateProblemTestDataResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.problem.rpc.Error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProblemTestDataResponse) Reset()         { *m = UpdateProblemTestDataResponse{} }
func (m *UpdateProblemTestDataResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemTestDataResponse) ProtoMessage()    {}
func (*UpdateProblemTestDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{7}
}
func (m *UpdateProblemTestDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProblemTestDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProblemTestDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateProblemTestDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemTestDataResponse.Merge(dst, src)
}
func (m *UpdateProblemTestDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProblemTestDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemTestDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemTestDataResponse proto.InternalMessageInfo

func (m *UpdateProblemTestDataResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

type SubmitProblemRequest struct {
	ProblemId            *string      `protobuf:"bytes,1,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	SubmitData           *common.Data `protobuf:"bytes,2,opt,name=submit_data,json=submitData" json:"submit_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SubmitProblemRequest) Reset()         { *m = SubmitProblemRequest{} }
func (m *SubmitProblemRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitProblemRequest) ProtoMessage()    {}
func (*SubmitProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{8}
}
func (m *SubmitProblemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitProblemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitProblemRequest.Merge(dst, src)
}
func (m *SubmitProblemRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitProblemRequest proto.InternalMessageInfo

func (m *SubmitProblemRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

func (m *SubmitProblemRequest) GetSubmitData() *common.Data {
	if m != nil {
		return m.SubmitData
	}
	return nil
}

type SubmitProblemResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.problem.rpc.Error" json:"error,omitempty"`
	SubmissionId         *string  `protobuf:"bytes,2,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitProblemResponse) Reset()         { *m = SubmitProblemResponse{} }
func (m *SubmitProblemResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitProblemResponse) ProtoMessage()    {}
func (*SubmitProblemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8, []int{9}
}
func (m *SubmitProblemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitProblemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitProblemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitProblemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitProblemResponse.Merge(dst, src)
}
func (m *SubmitProblemResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitProblemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitProblemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitProblemResponse proto.InternalMessageInfo

func (m *SubmitProblemResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *SubmitProblemResponse) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateProblemRequest)(nil), "syzoj.service.problem.rpc.CreateProblemRequest")
	proto.RegisterType((*CreateProblemResponse)(nil), "syzoj.service.problem.rpc.CreateProblemResponse")
	proto.RegisterType((*GetProblemRequest)(nil), "syzoj.service.problem.rpc.GetProblemRequest")
	proto.RegisterType((*GetProblemResponse)(nil), "syzoj.service.problem.rpc.GetProblemResponse")
	proto.RegisterType((*UpdateProblemStatementRequest)(nil), "syzoj.service.problem.rpc.UpdateProblemStatementRequest")
	proto.RegisterType((*UpdateProblemStatementResponse)(nil), "syzoj.service.problem.rpc.UpdateProblemStatementResponse")
	proto.RegisterType((*UpdateProblemTestDataRequest)(nil), "syzoj.service.problem.rpc.UpdateProblemTestDataRequest")
	proto.RegisterType((*UpdateProblemTestDataResponse)(nil), "syzoj.service.problem.rpc.UpdateProblemTestDataResponse")
	proto.RegisterType((*SubmitProblemRequest)(nil), "syzoj.service.problem.rpc.SubmitProblemRequest")
	proto.RegisterType((*SubmitProblemResponse)(nil), "syzoj.service.problem.rpc.SubmitProblemResponse")
	proto.RegisterEnum("syzoj.service.problem.rpc.Error", Error_name, Error_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProblemClient is the client API for Problem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProblemClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
	UpdateProblemStatement(ctx context.Context, in *UpdateProblemStatementRequest, opts ...grpc.CallOption) (*UpdateProblemStatementResponse, error)
	UpdateProblemTestData(ctx context.Context, in *UpdateProblemTestDataRequest, opts ...grpc.CallOption) (*UpdateProblemTestDataResponse, error)
	SubmitProblem(ctx context.Context, in *SubmitProblemRequest, opts ...grpc.CallOption) (*SubmitProblemResponse, error)
}

type problemClient struct {
	cc *grpc.ClientConn
}

func NewProblemClient(cc *grpc.ClientConn) ProblemClient {
	return &problemClient{cc}
}

func (c *problemClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.problem.rpc.Problem/CreateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.problem.rpc.Problem/GetProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) UpdateProblemStatement(ctx context.Context, in *UpdateProblemStatementRequest, opts ...grpc.CallOption) (*UpdateProblemStatementResponse, error) {
	out := new(UpdateProblemStatementResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.problem.rpc.Problem/UpdateProblemStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) UpdateProblemTestData(ctx context.Context, in *UpdateProblemTestDataRequest, opts ...grpc.CallOption) (*UpdateProblemTestDataResponse, error) {
	out := new(UpdateProblemTestDataResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.problem.rpc.Problem/UpdateProblemTestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) SubmitProblem(ctx context.Context, in *SubmitProblemRequest, opts ...grpc.CallOption) (*SubmitProblemResponse, error) {
	out := new(SubmitProblemResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.problem.rpc.Problem/SubmitProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServer is the server API for Problem service.
type ProblemServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	UpdateProblemStatement(context.Context, *UpdateProblemStatementRequest) (*UpdateProblemStatementResponse, error)
	UpdateProblemTestData(context.Context, *UpdateProblemTestDataRequest) (*UpdateProblemTestDataResponse, error)
	SubmitProblem(context.Context, *SubmitProblemRequest) (*SubmitProblemResponse, error)
}

func RegisterProblemServer(s *grpc.Server, srv ProblemServer) {
	s.RegisterService(&_Problem_serviceDesc, srv)
}

func _Problem_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.problem.rpc.Problem/CreateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.problem.rpc.Problem/GetProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_UpdateProblemStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).UpdateProblemStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.problem.rpc.Problem/UpdateProblemStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).UpdateProblemStatement(ctx, req.(*UpdateProblemStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_UpdateProblemTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemTestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).UpdateProblemTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.problem.rpc.Problem/UpdateProblemTestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).UpdateProblemTestData(ctx, req.(*UpdateProblemTestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_SubmitProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).SubmitProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.problem.rpc.Problem/SubmitProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).SubmitProblem(ctx, req.(*SubmitProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Problem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syzoj.service.problem.rpc.Problem",
	HandlerType: (*ProblemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _Problem_CreateProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _Problem_GetProblem_Handler,
		},
		{
			MethodName: "UpdateProblemStatement",
			Handler:    _Problem_UpdateProblemStatement_Handler,
		},
		{
			MethodName: "UpdateProblemTestData",
			Handler:    _Problem_UpdateProblemTestData_Handler,
		},
		{
			MethodName: "SubmitProblem",
			Handler:    _Problem_SubmitProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syzoj.service.problem.rpc.proto",
}

func (m *CreateProblemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProblemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateProblemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProblemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(*m.Error))
	}
	if m.ProblemId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProblemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProblemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProblemId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProblemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProblemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(*m.Error))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Statement != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(m.Statement.Size()))
		n1, err := m.Statement.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TestData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(m.TestData.Size()))
		n2, err := m.TestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProblemStatementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProblemStatementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProblemId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.Statement != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(m.Statement.Size()))
		n3, err := m.Statement.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProblemStatementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProblemStatementResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProblemTestDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProblemTestDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProblemId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.TestData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(m.TestData.Size()))
		n4, err := m.TestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProblemTestDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProblemTestDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubmitProblemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitProblemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProblemId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.ProblemId)))
		i += copy(dAtA[i:], *m.ProblemId)
	}
	if m.SubmitData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(m.SubmitData.Size()))
		n5, err := m.SubmitData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubmitProblemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitProblemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(*m.Error))
	}
	if m.SubmissionId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceProblemRpc(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojServiceProblemRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateProblemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateProblemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceProblemRpc(uint64(*m.Error))
	}
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProblemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProblemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceProblemRpc(uint64(*m.Error))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.Statement != nil {
		l = m.Statement.Size()
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.TestData != nil {
		l = m.TestData.Size()
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProblemStatementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.Statement != nil {
		l = m.Statement.Size()
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProblemStatementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceProblemRpc(uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProblemTestDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.TestData != nil {
		l = m.TestData.Size()
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProblemTestDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceProblemRpc(uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitProblemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProblemId != nil {
		l = len(*m.ProblemId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.SubmitData != nil {
		l = m.SubmitData.Size()
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitProblemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceProblemRpc(uint64(*m.Error))
	}
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceProblemRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojServiceProblemRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojServiceProblemRpc(x uint64) (n int) {
	return sovSyzojServiceProblemRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateProblemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProblemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProblemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProblemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProblemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProblemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProblemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProblemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProblemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProblemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProblemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProblemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statement == nil {
				m.Statement = &common.ProblemStatement{}
			}
			if err := m.Statement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestData == nil {
				m.TestData = &common.Data{}
			}
			if err := m.TestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProblemStatementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProblemStatementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProblemStatementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statement == nil {
				m.Statement = &common.ProblemStatement{}
			}
			if err := m.Statement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProblemStatementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProblemStatementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProblemStatementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProblemTestDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProblemTestDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProblemTestDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestData == nil {
				m.TestData = &common.Data{}
			}
			if err := m.TestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProblemTestDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProblemTestDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProblemTestDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitProblemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitProblemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitProblemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProblemId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitData == nil {
				m.SubmitData = &common.Data{}
			}
			if err := m.SubmitData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitProblemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitProblemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitProblemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceProblemRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceProblemRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojServiceProblemRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojServiceProblemRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceProblemRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojServiceProblemRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojServiceProblemRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojServiceProblemRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojServiceProblemRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojServiceProblemRpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("syzoj.service.problem.rpc.proto", fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8)
}

var fileDescriptor_syzoj_service_problem_rpc_664ef978c5b7fbd8 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x43, 0xa3, 0x92, 0x09, 0x29, 0x61, 0x49, 0x50, 0xb0, 0xa8, 0x1b, 0x99, 0x4b, 0x84,
	0x1a, 0xbb, 0x0a, 0x12, 0xb4, 0x12, 0xe2, 0x50, 0xfe, 0xd4, 0x0b, 0x42, 0x2e, 0x15, 0x88, 0x4b,
	0xe5, 0xc4, 0xab, 0xe0, 0x12, 0xef, 0x9a, 0xdd, 0x0d, 0x08, 0xc4, 0x13, 0x20, 0xf1, 0x5e, 0x1c,
	0xe1, 0x0d, 0x50, 0xde, 0x82, 0x1b, 0xb2, 0x77, 0x91, 0xb1, 0x71, 0x8c, 0xd3, 0x5c, 0x22, 0x7b,
	0xf3, 0x7d, 0x33, 0xdf, 0x7c, 0x3b, 0x33, 0x86, 0x1d, 0xf1, 0xf1, 0x13, 0x3b, 0xb3, 0x05, 0xe1,
	0xef, 0x83, 0x09, 0xb1, 0x23, 0xce, 0xc6, 0x33, 0x12, 0xda, 0x3c, 0x9a, 0xc4, 0xcf, 0x92, 0xe1,
	0x1b, 0x4b, 0x01, 0xc6, 0x4e, 0xc8, 0x7c, 0x32, 0x73, 0x26, 0x2c, 0x0c, 0x19, 0x75, 0x14, 0x4e,
	0xbd, 0x28, 0xae, 0xb5, 0x0b, 0x9d, 0x87, 0x9c, 0x78, 0x92, 0x3c, 0x57, 0x2c, 0x97, 0xbc, 0x9b,
	0x13, 0x21, 0x71, 0x07, 0xea, 0x32, 0x90, 0x33, 0xd2, 0xab, 0xf5, 0xd1, 0xa0, 0xe1, 0xaa, 0x17,
	0x8b, 0x42, 0x37, 0x87, 0x16, 0x11, 0xa3, 0x82, 0xe0, 0xbb, 0x50, 0x27, 0x9c, 0x33, 0xde, 0x43,
	0x7d, 0x34, 0xd8, 0x1a, 0xf5, 0xed, 0xe5, 0x9a, 0x1f, 0xc7, 0x38, 0x57, 0xc1, 0xf1, 0x36, 0x80,
	0xfe, 0xef, 0x34, 0xf0, 0x75, 0xae, 0x86, 0x3e, 0x39, 0xf2, 0xad, 0x11, 0x5c, 0x7d, 0x4a, 0x64,
	0x4e, 0x5a, 0x96, 0x83, 0xf2, 0x9c, 0x1f, 0x08, 0xf0, 0xdf, 0xa4, 0x35, 0x15, 0x16, 0x1a, 0x81,
	0xef, 0x43, 0x43, 0x48, 0x4f, 0x92, 0x90, 0x50, 0xd9, 0xbb, 0xd8, 0x47, 0x83, 0xe6, 0xc8, 0xb4,
	0x33, 0xf6, 0xea, 0xfc, 0xc7, 0x7f, 0x50, 0x6e, 0x4a, 0xc0, 0x0e, 0x34, 0x24, 0x11, 0xf2, 0xd4,
	0xf7, 0xa4, 0xd7, 0xdb, 0x48, 0xd8, 0x38, 0xcb, 0x7e, 0xe4, 0x49, 0xcf, 0xbd, 0x14, 0x83, 0xe2,
	0x27, 0xeb, 0x33, 0x6c, 0x9f, 0x44, 0x7e, 0xea, 0x7b, 0x1a, 0xb5, 0x92, 0x27, 0x59, 0xb9, 0xb5,
	0x15, 0xe5, 0x5a, 0xaf, 0xc0, 0x5c, 0x96, 0x7d, 0x3d, 0x73, 0x2d, 0x0a, 0x37, 0x33, 0x91, 0x5f,
	0xe8, 0x82, 0x2b, 0x96, 0x95, 0xf1, 0xb1, 0x56, 0xc1, 0xc7, 0x97, 0x39, 0x1f, 0xd3, 0x7c, 0x6b,
	0x16, 0x72, 0x06, 0x9d, 0xe3, 0xf9, 0x38, 0x0c, 0x56, 0xeb, 0x55, 0x7c, 0x07, 0x9a, 0x22, 0xa1,
	0xfd, 0xaf, 0x04, 0x50, 0xb0, 0xa4, 0x08, 0x09, 0xdd, 0x5c, 0xae, 0x35, 0x5b, 0xfc, 0x16, 0xb4,
	0x92, 0xf0, 0x42, 0x04, 0x8c, 0xa6, 0x73, 0x78, 0x39, 0x3d, 0x3c, 0xf2, 0x6f, 0x1f, 0x40, 0x3d,
	0x21, 0xe1, 0x26, 0x6c, 0x9e, 0xd0, 0xb7, 0x94, 0x7d, 0xa0, 0xed, 0x0b, 0x78, 0x0b, 0xe0, 0xd0,
	0xf3, 0x75, 0xb5, 0x6d, 0x84, 0xaf, 0xc1, 0x15, 0xad, 0xea, 0x19, 0x93, 0x4f, 0xd8, 0x9c, 0xfa,
	0xed, 0xda, 0xe8, 0xd7, 0x06, 0x6c, 0xea, 0x53, 0xcc, 0xa1, 0x95, 0xd9, 0x20, 0xd8, 0x29, 0x51,
	0x59, 0xb4, 0x99, 0x8c, 0xbd, 0xea, 0x04, 0xed, 0x4b, 0x00, 0x90, 0x2e, 0x04, 0xbc, 0x5b, 0xc2,
	0xff, 0x67, 0xd9, 0x18, 0xc3, 0x8a, 0x68, 0x9d, 0xea, 0x2b, 0x82, 0xeb, 0xc5, 0xb3, 0x82, 0xf7,
	0x4b, 0x22, 0x95, 0x0e, 0xb7, 0x71, 0x70, 0x0e, 0xa6, 0xd6, 0xf3, 0x05, 0x41, 0xb7, 0xb0, 0xe3,
	0xf1, 0xbd, 0xaa, 0x41, 0x73, 0x33, 0x69, 0xec, 0xaf, 0x4e, 0xd4, 0x62, 0x38, 0xb4, 0x32, 0x8d,
	0x5b, 0x7a, 0xf7, 0x45, 0xe3, 0x54, 0x7a, 0xf7, 0x85, 0x33, 0x71, 0xf8, 0xe0, 0xdb, 0xc2, 0x44,
	0xdf, 0x17, 0x26, 0xfa, 0xb9, 0x30, 0xd1, 0xeb, 0xbd, 0x69, 0x20, 0xdf, 0xcc, 0xc7, 0xf1, 0x68,
	0xa9, 0x8f, 0xa1, 0xfa, 0x1d, 0xd2, 0xe9, 0x70, 0xca, 0x1c, 0x1d, 0xd5, 0xd1, 0x51, 0x1d, 0x1e,
	0x4d, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x3b, 0x8d, 0x99, 0x7d, 0x07, 0x00, 0x00,
}
