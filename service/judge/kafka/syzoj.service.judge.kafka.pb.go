// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.service.judge.kafka.proto

package kafka // import "github.com/syzoj/syzoj-ng-go/service/judge/kafka"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JudgeEvent struct {
	SubmissionId *string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*JudgeEvent_Done
	Event                isJudgeEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *JudgeEvent) Reset()         { *m = JudgeEvent{} }
func (m *JudgeEvent) String() string { return proto.CompactTextString(m) }
func (*JudgeEvent) ProtoMessage()    {}
func (*JudgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_kafka_31c6e880abf3cbdd, []int{0}
}
func (m *JudgeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeEvent.Merge(dst, src)
}
func (m *JudgeEvent) XXX_Size() int {
	return m.Size()
}
func (m *JudgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeEvent proto.InternalMessageInfo

type isJudgeEvent_Event interface {
	isJudgeEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JudgeEvent_Done struct {
	Done *JudgeDoneEvent `protobuf:"bytes,16,opt,name=done,oneof"`
}

func (*JudgeEvent_Done) isJudgeEvent_Event() {}

func (m *JudgeEvent) GetEvent() isJudgeEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *JudgeEvent) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

func (m *JudgeEvent) GetDone() *JudgeDoneEvent {
	if x, ok := m.GetEvent().(*JudgeEvent_Done); ok {
		return x.Done
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JudgeEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JudgeEvent_OneofMarshaler, _JudgeEvent_OneofUnmarshaler, _JudgeEvent_OneofSizer, []interface{}{
		(*JudgeEvent_Done)(nil),
	}
}

func _JudgeEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JudgeEvent)
	// event
	switch x := m.Event.(type) {
	case *JudgeEvent_Done:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Done); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JudgeEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _JudgeEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JudgeEvent)
	switch tag {
	case 16: // event.done
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JudgeDoneEvent)
		err := b.DecodeMessage(msg)
		m.Event = &JudgeEvent_Done{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JudgeEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JudgeEvent)
	// event
	switch x := m.Event.(type) {
	case *JudgeEvent_Done:
		s := proto.Size(x.Done)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type JudgeDoneEvent struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JudgeDoneEvent) Reset()         { *m = JudgeDoneEvent{} }
func (m *JudgeDoneEvent) String() string { return proto.CompactTextString(m) }
func (*JudgeDoneEvent) ProtoMessage()    {}
func (*JudgeDoneEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_kafka_31c6e880abf3cbdd, []int{1}
}
func (m *JudgeDoneEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgeDoneEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgeDoneEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JudgeDoneEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgeDoneEvent.Merge(dst, src)
}
func (m *JudgeDoneEvent) XXX_Size() int {
	return m.Size()
}
func (m *JudgeDoneEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgeDoneEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JudgeDoneEvent proto.InternalMessageInfo

func init() {
	proto.RegisterType((*JudgeEvent)(nil), "syzoj.service.judge.kafka.JudgeEvent")
	proto.RegisterType((*JudgeDoneEvent)(nil), "syzoj.service.judge.kafka.JudgeDoneEvent")
}
func (m *JudgeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubmissionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceJudgeKafka(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.Event != nil {
		nn1, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JudgeEvent_Done) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Done != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSyzojServiceJudgeKafka(dAtA, i, uint64(m.Done.Size()))
		n2, err := m.Done.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *JudgeDoneEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgeDoneEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojServiceJudgeKafka(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JudgeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceJudgeKafka(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JudgeEvent_Done) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Done != nil {
		l = m.Done.Size()
		n += 2 + l + sovSyzojServiceJudgeKafka(uint64(l))
	}
	return n
}
func (m *JudgeDoneEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojServiceJudgeKafka(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojServiceJudgeKafka(x uint64) (n int) {
	return sovSyzojServiceJudgeKafka(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JudgeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeKafka
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeKafka
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeKafka
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeKafka
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeKafka
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JudgeDoneEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &JudgeEvent_Done{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeKafka(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeKafka
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgeDoneEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeKafka
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgeDoneEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgeDoneEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeKafka(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeKafka
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojServiceJudgeKafka(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojServiceJudgeKafka
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceJudgeKafka
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceJudgeKafka
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojServiceJudgeKafka
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojServiceJudgeKafka
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojServiceJudgeKafka(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojServiceJudgeKafka = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojServiceJudgeKafka   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("syzoj.service.judge.kafka.proto", fileDescriptor_syzoj_service_judge_kafka_31c6e880abf3cbdd)
}

var fileDescriptor_syzoj_service_judge_kafka_31c6e880abf3cbdd = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xae, 0xac, 0xca,
	0xcf, 0xd2, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0xcb, 0x2a, 0x4d, 0x49, 0x4f, 0xd5,
	0xcb, 0x4e, 0x4c, 0xcb, 0x4e, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc4, 0xa9, 0x40,
	0xa9, 0x9a, 0x8b, 0xcb, 0x0b, 0xc4, 0x75, 0x2d, 0x4b, 0xcd, 0x2b, 0x11, 0x52, 0xe6, 0xe2, 0x2d,
	0x2e, 0x4d, 0xca, 0xcd, 0x2c, 0x2e, 0xce, 0xcc, 0xcf, 0x8b, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0xe2, 0x41, 0x08, 0x7a, 0xa6, 0x08, 0xd9, 0x73, 0xb1, 0xa4, 0xe4, 0xe7, 0xa5,
	0x4a, 0x08, 0x28, 0x30, 0x6a, 0x70, 0x1b, 0x69, 0xea, 0xe1, 0xb6, 0x1d, 0x6c, 0xb2, 0x4b, 0x7e,
	0x1e, 0xc4, 0x74, 0x0f, 0x86, 0x20, 0xb0, 0x46, 0x27, 0x76, 0x2e, 0xd6, 0x54, 0x90, 0x80, 0x92,
	0x00, 0x17, 0x1f, 0xaa, 0x12, 0x27, 0xbb, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x31, 0xca, 0x20, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0x1f, 0x6c, 0x0b, 0x84, 0xd4, 0xcd, 0x4b, 0xd7, 0x4d, 0xcf, 0xd7, 0x87, 0xda, 0xa8, 0x0f, 0xb6,
	0x51, 0x1f, 0x6c, 0x23, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xea, 0xc9, 0xff, 0x0b, 0x01, 0x00,
	0x00,
}
