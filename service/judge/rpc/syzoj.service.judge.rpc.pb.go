// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.service.judge.rpc.proto

package rpc // import "github.com/syzoj/syzoj-ng-go/service/judge/rpc"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/syzoj/syzoj-ng-go/model/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Error int32

const (
	Error_Unknown            Error = 0
	Error_SubmissionNotFound Error = 1
)

var Error_name = map[int32]string{
	0: "Unknown",
	1: "SubmissionNotFound",
}
var Error_value = map[string]int32{
	"Unknown":            0,
	"SubmissionNotFound": 1,
}

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}
func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (x *Error) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_value, data, "Error")
	if err != nil {
		return err
	}
	*x = Error(value)
	return nil
}
func (Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{0}
}

type CreateSubmissionRequest struct {
	TestData             *common.Data `protobuf:"bytes,2,opt,name=test_data,json=testData" json:"test_data,omitempty"`
	SubmitData           *common.Data `protobuf:"bytes,3,opt,name=submit_data,json=submitData" json:"submit_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateSubmissionRequest) Reset()         { *m = CreateSubmissionRequest{} }
func (m *CreateSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSubmissionRequest) ProtoMessage()    {}
func (*CreateSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{0}
}
func (m *CreateSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSubmissionRequest.Merge(dst, src)
}
func (m *CreateSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSubmissionRequest proto.InternalMessageInfo

func (m *CreateSubmissionRequest) GetTestData() *common.Data {
	if m != nil {
		return m.TestData
	}
	return nil
}

func (m *CreateSubmissionRequest) GetSubmitData() *common.Data {
	if m != nil {
		return m.SubmitData
	}
	return nil
}

type CreateSubmissionResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.judge.rpc.Error" json:"error,omitempty"`
	SubmissionId         *string  `protobuf:"bytes,2,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSubmissionResponse) Reset()         { *m = CreateSubmissionResponse{} }
func (m *CreateSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSubmissionResponse) ProtoMessage()    {}
func (*CreateSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{1}
}
func (m *CreateSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSubmissionResponse.Merge(dst, src)
}
func (m *CreateSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSubmissionResponse proto.InternalMessageInfo

func (m *CreateSubmissionResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *CreateSubmissionResponse) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

type GetSubmissionRequest struct {
	SubmissionId         *string  `protobuf:"bytes,1,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubmissionRequest) Reset()         { *m = GetSubmissionRequest{} }
func (m *GetSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubmissionRequest) ProtoMessage()    {}
func (*GetSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{2}
}
func (m *GetSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubmissionRequest.Merge(dst, src)
}
func (m *GetSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubmissionRequest proto.InternalMessageInfo

func (m *GetSubmissionRequest) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

type GetSubmissionResponse struct {
	Error                *Error       `protobuf:"varint,1,opt,name=error,enum=syzoj.service.judge.rpc.Error" json:"error,omitempty"`
	TestData             *common.Data `protobuf:"bytes,2,opt,name=test_data,json=testData" json:"test_data,omitempty"`
	SubmitData           *common.Data `protobuf:"bytes,3,opt,name=submit_data,json=submitData" json:"submit_data,omitempty"`
	Result               *common.Data `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetSubmissionResponse) Reset()         { *m = GetSubmissionResponse{} }
func (m *GetSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubmissionResponse) ProtoMessage()    {}
func (*GetSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{3}
}
func (m *GetSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubmissionResponse.Merge(dst, src)
}
func (m *GetSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubmissionResponse proto.InternalMessageInfo

func (m *GetSubmissionResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *GetSubmissionResponse) GetTestData() *common.Data {
	if m != nil {
		return m.TestData
	}
	return nil
}

func (m *GetSubmissionResponse) GetSubmitData() *common.Data {
	if m != nil {
		return m.SubmitData
	}
	return nil
}

func (m *GetSubmissionResponse) GetResult() *common.Data {
	if m != nil {
		return m.Result
	}
	return nil
}

type SubscribeSubmissionRequest struct {
	SubmissionId         *string  `protobuf:"bytes,1,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeSubmissionRequest) Reset()         { *m = SubscribeSubmissionRequest{} }
func (m *SubscribeSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeSubmissionRequest) ProtoMessage()    {}
func (*SubscribeSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{4}
}
func (m *SubscribeSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSubmissionRequest.Merge(dst, src)
}
func (m *SubscribeSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSubmissionRequest proto.InternalMessageInfo

func (m *SubscribeSubmissionRequest) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

type SubscribeSubmissionResponse struct {
	Error                *Error       `protobuf:"varint,1,opt,name=error,enum=syzoj.service.judge.rpc.Error" json:"error,omitempty"`
	Result               *common.Data `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SubscribeSubmissionResponse) Reset()         { *m = SubscribeSubmissionResponse{} }
func (m *SubscribeSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeSubmissionResponse) ProtoMessage()    {}
func (*SubscribeSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{5}
}
func (m *SubscribeSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSubmissionResponse.Merge(dst, src)
}
func (m *SubscribeSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSubmissionResponse proto.InternalMessageInfo

func (m *SubscribeSubmissionResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func (m *SubscribeSubmissionResponse) GetResult() *common.Data {
	if m != nil {
		return m.Result
	}
	return nil
}

type HandleSubmissionRequest struct {
	SubmissionId         *string      `protobuf:"bytes,1,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	Result               *common.Data `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	Done                 *bool        `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HandleSubmissionRequest) Reset()         { *m = HandleSubmissionRequest{} }
func (m *HandleSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*HandleSubmissionRequest) ProtoMessage()    {}
func (*HandleSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{6}
}
func (m *HandleSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleSubmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleSubmissionRequest.Merge(dst, src)
}
func (m *HandleSubmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandleSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleSubmissionRequest proto.InternalMessageInfo

func (m *HandleSubmissionRequest) GetSubmissionId() string {
	if m != nil && m.SubmissionId != nil {
		return *m.SubmissionId
	}
	return ""
}

func (m *HandleSubmissionRequest) GetResult() *common.Data {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *HandleSubmissionRequest) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

type HandleSubmissionResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.judge.rpc.Error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleSubmissionResponse) Reset()         { *m = HandleSubmissionResponse{} }
func (m *HandleSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*HandleSubmissionResponse) ProtoMessage()    {}
func (*HandleSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c, []int{7}
}
func (m *HandleSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleSubmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleSubmissionResponse.Merge(dst, src)
}
func (m *HandleSubmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *HandleSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleSubmissionResponse proto.InternalMessageInfo

func (m *HandleSubmissionResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_Unknown
}

func init() {
	proto.RegisterType((*CreateSubmissionRequest)(nil), "syzoj.service.judge.rpc.CreateSubmissionRequest")
	proto.RegisterType((*CreateSubmissionResponse)(nil), "syzoj.service.judge.rpc.CreateSubmissionResponse")
	proto.RegisterType((*GetSubmissionRequest)(nil), "syzoj.service.judge.rpc.GetSubmissionRequest")
	proto.RegisterType((*GetSubmissionResponse)(nil), "syzoj.service.judge.rpc.GetSubmissionResponse")
	proto.RegisterType((*SubscribeSubmissionRequest)(nil), "syzoj.service.judge.rpc.SubscribeSubmissionRequest")
	proto.RegisterType((*SubscribeSubmissionResponse)(nil), "syzoj.service.judge.rpc.SubscribeSubmissionResponse")
	proto.RegisterType((*HandleSubmissionRequest)(nil), "syzoj.service.judge.rpc.HandleSubmissionRequest")
	proto.RegisterType((*HandleSubmissionResponse)(nil), "syzoj.service.judge.rpc.HandleSubmissionResponse")
	proto.RegisterEnum("syzoj.service.judge.rpc.Error", Error_name, Error_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JudgeClient is the client API for Judge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JudgeClient interface {
	CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error)
	GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error)
	SubscribeSubmission(ctx context.Context, in *SubscribeSubmissionRequest, opts ...grpc.CallOption) (Judge_SubscribeSubmissionClient, error)
	// First request should contain submission_id only
	HandleSubmission(ctx context.Context, opts ...grpc.CallOption) (Judge_HandleSubmissionClient, error)
}

type judgeClient struct {
	cc *grpc.ClientConn
}

func NewJudgeClient(cc *grpc.ClientConn) JudgeClient {
	return &judgeClient{cc}
}

func (c *judgeClient) CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error) {
	out := new(CreateSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.judge.rpc.Judge/CreateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error) {
	out := new(GetSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.judge.rpc.Judge/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) SubscribeSubmission(ctx context.Context, in *SubscribeSubmissionRequest, opts ...grpc.CallOption) (Judge_SubscribeSubmissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Judge_serviceDesc.Streams[0], "/syzoj.service.judge.rpc.Judge/SubscribeSubmission", opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeSubscribeSubmissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Judge_SubscribeSubmissionClient interface {
	Recv() (*SubscribeSubmissionResponse, error)
	grpc.ClientStream
}

type judgeSubscribeSubmissionClient struct {
	grpc.ClientStream
}

func (x *judgeSubscribeSubmissionClient) Recv() (*SubscribeSubmissionResponse, error) {
	m := new(SubscribeSubmissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *judgeClient) HandleSubmission(ctx context.Context, opts ...grpc.CallOption) (Judge_HandleSubmissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Judge_serviceDesc.Streams[1], "/syzoj.service.judge.rpc.Judge/HandleSubmission", opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeHandleSubmissionClient{stream}
	return x, nil
}

type Judge_HandleSubmissionClient interface {
	Send(*HandleSubmissionRequest) error
	CloseAndRecv() (*HandleSubmissionResponse, error)
	grpc.ClientStream
}

type judgeHandleSubmissionClient struct {
	grpc.ClientStream
}

func (x *judgeHandleSubmissionClient) Send(m *HandleSubmissionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *judgeHandleSubmissionClient) CloseAndRecv() (*HandleSubmissionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HandleSubmissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JudgeServer is the server API for Judge service.
type JudgeServer interface {
	CreateSubmission(context.Context, *CreateSubmissionRequest) (*CreateSubmissionResponse, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error)
	SubscribeSubmission(*SubscribeSubmissionRequest, Judge_SubscribeSubmissionServer) error
	// First request should contain submission_id only
	HandleSubmission(Judge_HandleSubmissionServer) error
}

func RegisterJudgeServer(s *grpc.Server, srv JudgeServer) {
	s.RegisterService(&_Judge_serviceDesc, srv)
}

func _Judge_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.judge.rpc.Judge/CreateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).CreateSubmission(ctx, req.(*CreateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.judge.rpc.Judge/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).GetSubmission(ctx, req.(*GetSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_SubscribeSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSubmissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JudgeServer).SubscribeSubmission(m, &judgeSubscribeSubmissionServer{stream})
}

type Judge_SubscribeSubmissionServer interface {
	Send(*SubscribeSubmissionResponse) error
	grpc.ServerStream
}

type judgeSubscribeSubmissionServer struct {
	grpc.ServerStream
}

func (x *judgeSubscribeSubmissionServer) Send(m *SubscribeSubmissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Judge_HandleSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JudgeServer).HandleSubmission(&judgeHandleSubmissionServer{stream})
}

type Judge_HandleSubmissionServer interface {
	SendAndClose(*HandleSubmissionResponse) error
	Recv() (*HandleSubmissionRequest, error)
	grpc.ServerStream
}

type judgeHandleSubmissionServer struct {
	grpc.ServerStream
}

func (x *judgeHandleSubmissionServer) SendAndClose(m *HandleSubmissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *judgeHandleSubmissionServer) Recv() (*HandleSubmissionRequest, error) {
	m := new(HandleSubmissionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Judge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syzoj.service.judge.rpc.Judge",
	HandlerType: (*JudgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubmission",
			Handler:    _Judge_CreateSubmission_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _Judge_GetSubmission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSubmission",
			Handler:       _Judge_SubscribeSubmission_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HandleSubmission",
			Handler:       _Judge_HandleSubmission_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "syzoj.service.judge.rpc.proto",
}

func (m *CreateSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TestData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.TestData.Size()))
		n1, err := m.TestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SubmitData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.SubmitData.Size()))
		n2, err := m.SubmitData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(*m.Error))
	}
	if m.SubmissionId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubmissionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(*m.Error))
	}
	if m.TestData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.TestData.Size()))
		n3, err := m.TestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SubmitData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.SubmitData.Size()))
		n4, err := m.SubmitData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Result != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubmissionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(*m.Error))
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.Result.Size()))
		n6, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleSubmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleSubmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubmissionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(len(*m.SubmissionId)))
		i += copy(dAtA[i:], *m.SubmissionId)
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(m.Result.Size()))
		n7, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Done != nil {
		dAtA[i] = 0x18
		i++
		if *m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleSubmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleSubmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceJudgeRpc(dAtA, i, uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojServiceJudgeRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestData != nil {
		l = m.TestData.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.SubmitData != nil {
		l = m.SubmitData.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceJudgeRpc(uint64(*m.Error))
	}
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceJudgeRpc(uint64(*m.Error))
	}
	if m.TestData != nil {
		l = m.TestData.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.SubmitData != nil {
		l = m.SubmitData.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceJudgeRpc(uint64(*m.Error))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleSubmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmissionId != nil {
		l = len(*m.SubmissionId)
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSyzojServiceJudgeRpc(uint64(l))
	}
	if m.Done != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleSubmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceJudgeRpc(uint64(*m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojServiceJudgeRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojServiceJudgeRpc(x uint64) (n int) {
	return sovSyzojServiceJudgeRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestData == nil {
				m.TestData = &common.Data{}
			}
			if err := m.TestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitData == nil {
				m.SubmitData = &common.Data{}
			}
			if err := m.SubmitData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestData == nil {
				m.TestData = &common.Data{}
			}
			if err := m.TestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitData == nil {
				m.SubmitData = &common.Data{}
			}
			if err := m.SubmitData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Data{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Data{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleSubmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleSubmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleSubmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubmissionId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Data{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Done = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleSubmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleSubmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleSubmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceJudgeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceJudgeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojServiceJudgeRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojServiceJudgeRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceJudgeRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojServiceJudgeRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojServiceJudgeRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojServiceJudgeRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojServiceJudgeRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojServiceJudgeRpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("syzoj.service.judge.rpc.proto", fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c)
}

var fileDescriptor_syzoj_service_judge_rpc_7dbdf678ea82629c = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xc5, 0x6d, 0x03, 0xed, 0x0d, 0x45, 0xd1, 0xe5, 0x91, 0xd1, 0x20, 0x42, 0x35, 0x6c, 0xa2,
	0x8a, 0x78, 0x4a, 0xda, 0x1d, 0x6c, 0x78, 0x3f, 0x16, 0x08, 0x4d, 0xc5, 0x86, 0x4d, 0x35, 0x19,
	0x5b, 0x61, 0x4a, 0x62, 0x07, 0x3f, 0xa8, 0xca, 0x82, 0x4a, 0x7c, 0x1d, 0x4b, 0xfe, 0x00, 0x94,
	0x2f, 0xe0, 0x13, 0xd0, 0x8c, 0x47, 0x44, 0x4d, 0xe2, 0x42, 0x1a, 0x89, 0x4d, 0x64, 0x67, 0xce,
	0x39, 0xf7, 0x9e, 0xe3, 0x6b, 0xc3, 0x2d, 0x7d, 0xfc, 0x59, 0x1e, 0x52, 0xcd, 0xd5, 0xa7, 0x3c,
	0xe3, 0xf4, 0xd0, 0xb2, 0x3e, 0xa7, 0x6a, 0x94, 0xd1, 0x91, 0x92, 0x46, 0x62, 0xd3, 0xf3, 0x39,
	0xbc, 0x3d, 0x94, 0x8c, 0x0f, 0xe2, 0x4c, 0x0e, 0x87, 0x52, 0xc4, 0x0e, 0xe5, 0x36, 0x8e, 0x19,
	0x9d, 0x40, 0xf3, 0xb1, 0xe2, 0xa9, 0xe1, 0xfb, 0xb6, 0x37, 0xcc, 0xb5, 0xce, 0xa5, 0x48, 0xf8,
	0x47, 0xcb, 0xb5, 0xc1, 0x18, 0x36, 0x0c, 0xd7, 0xe6, 0x80, 0xa5, 0x26, 0x0d, 0x56, 0xb6, 0x48,
	0xbb, 0xde, 0x45, 0x7a, 0x4a, 0xe2, 0x49, 0x6a, 0xd2, 0x64, 0xbd, 0x00, 0x15, 0x2b, 0xdc, 0x85,
	0xba, 0x2e, 0x54, 0x2a, 0xca, 0xaa, 0x97, 0x02, 0x0e, 0x56, 0xac, 0x23, 0x0b, 0xc1, 0x6c, 0x03,
	0x7a, 0x24, 0x85, 0xe6, 0xb8, 0x07, 0x35, 0xae, 0x94, 0x54, 0x01, 0xd9, 0x22, 0xed, 0x2b, 0xdd,
	0x16, 0xf5, 0xa5, 0xf0, 0xb4, 0x40, 0x25, 0x0e, 0x8c, 0x77, 0x60, 0x53, 0xff, 0xd1, 0x3a, 0xc8,
	0x59, 0xd9, 0xfb, 0x46, 0x72, 0x79, 0xf2, 0xe7, 0x4b, 0x16, 0xdd, 0x87, 0x6b, 0xcf, 0xb9, 0x99,
	0x35, 0x3d, 0x43, 0x26, 0x73, 0xc8, 0x3f, 0x08, 0x5c, 0x9f, 0x62, 0x2f, 0xd5, 0xf1, 0x7f, 0x49,
	0x1a, 0xb7, 0xe1, 0xa2, 0xe2, 0xda, 0x0e, 0x4c, 0xb0, 0xe6, 0xc5, 0x57, 0x88, 0xe8, 0x21, 0x84,
	0xfb, 0xb6, 0xa7, 0x33, 0x95, 0xf7, 0xf8, 0x39, 0x43, 0x3a, 0x81, 0x9b, 0x73, 0x25, 0x96, 0x4a,
	0x6a, 0xe2, 0x61, 0xe5, 0xaf, 0x1e, 0xbe, 0x40, 0xf3, 0x45, 0x2a, 0xd8, 0xe0, 0x9c, 0x06, 0x16,
	0xa9, 0x85, 0x08, 0x6b, 0x4c, 0x0a, 0x5e, 0x9e, 0xc4, 0x7a, 0x52, 0xae, 0xa3, 0x37, 0x10, 0xcc,
	0xd6, 0x5f, 0xc6, 0xfd, 0xf6, 0x5d, 0xa8, 0x95, 0x7b, 0xac, 0xc3, 0xa5, 0xb7, 0xe2, 0x83, 0x90,
	0x47, 0xa2, 0x71, 0x01, 0x6f, 0x00, 0x4e, 0x2a, 0xbc, 0x96, 0xe6, 0x99, 0xb4, 0x82, 0x35, 0x48,
	0xf7, 0xd7, 0x2a, 0xd4, 0x5e, 0x15, 0x42, 0x78, 0x04, 0x8d, 0xe9, 0x3b, 0x86, 0x3b, 0xde, 0x92,
	0x9e, 0xf7, 0x20, 0xbc, 0xb7, 0x00, 0xa3, 0xb2, 0x29, 0x60, 0xf3, 0xd4, 0x3d, 0xc1, 0x8e, 0x57,
	0x63, 0xde, 0x6d, 0x0c, 0xe9, 0xbf, 0xc2, 0xab, 0x7a, 0x5f, 0x09, 0x5c, 0x9d, 0x33, 0x74, 0xb8,
	0xeb, 0xd5, 0xf1, 0x4f, 0x79, 0xb8, 0xb7, 0x18, 0xc9, 0xb5, 0xb0, 0x43, 0xf0, 0x18, 0x1a, 0xd3,
	0xe7, 0x7e, 0x46, 0xda, 0x9e, 0x11, 0x3d, 0x23, 0x6d, 0xdf, 0x50, 0xb5, 0xc9, 0xa3, 0x07, 0xdf,
	0xc6, 0x2d, 0xf2, 0x7d, 0xdc, 0x22, 0x3f, 0xc7, 0x2d, 0xf2, 0x8e, 0xf6, 0x73, 0xf3, 0xde, 0xf6,
	0x8a, 0x81, 0x75, 0x4f, 0xbf, 0xfb, 0xed, 0x88, 0x7e, 0xa7, 0x2f, 0xe3, 0x4a, 0x38, 0x2e, 0x85,
	0x63, 0x35, 0xca, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x01, 0x20, 0xb3, 0x65, 0x06, 0x00,
	0x00,
}
