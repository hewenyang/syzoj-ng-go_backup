// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syzoj.service.user.rpc.proto

package rpc // import "github.com/syzoj/syzoj-ng-go/service/user/rpc"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/syzoj/syzoj-ng-go/model/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Error int32

const (
	Error_DuplicateUserName Error = 1
	Error_UserNotFound      Error = 2
	Error_PasswordIncorrect Error = 3
	Error_InvalidToken      Error = 4
	Error_InvalidUserName   Error = 5
)

var Error_name = map[int32]string{
	1: "DuplicateUserName",
	2: "UserNotFound",
	3: "PasswordIncorrect",
	4: "InvalidToken",
	5: "InvalidUserName",
}
var Error_value = map[string]int32{
	"DuplicateUserName": 1,
	"UserNotFound":      2,
	"PasswordIncorrect": 3,
	"InvalidToken":      4,
	"InvalidUserName":   5,
}

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}
func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (x *Error) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_value, data, "Error")
	if err != nil {
		return err
	}
	*x = Error(value)
	return nil
}
func (Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{0}
}

type RegisterUserRequest struct {
	UserName             *string  `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password             *string  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserRequest) Reset()         { *m = RegisterUserRequest{} }
func (m *RegisterUserRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterUserRequest) ProtoMessage()    {}
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{0}
}
func (m *RegisterUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserRequest.Merge(dst, src)
}
func (m *RegisterUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserRequest proto.InternalMessageInfo

func (m *RegisterUserRequest) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *RegisterUserRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type RegisterUserResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.user.rpc.Error" json:"error,omitempty"`
	UserId               *string  `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserResponse) Reset()         { *m = RegisterUserResponse{} }
func (m *RegisterUserResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterUserResponse) ProtoMessage()    {}
func (*RegisterUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{1}
}
func (m *RegisterUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserResponse.Merge(dst, src)
}
func (m *RegisterUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserResponse proto.InternalMessageInfo

func (m *RegisterUserResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_DuplicateUserName
}

func (m *RegisterUserResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type LoginUserRequest struct {
	UserName             *string            `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password             *string            `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	DeviceInfo           *common.DeviceInfo `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LoginUserRequest) Reset()         { *m = LoginUserRequest{} }
func (m *LoginUserRequest) String() string { return proto.CompactTextString(m) }
func (*LoginUserRequest) ProtoMessage()    {}
func (*LoginUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{2}
}
func (m *LoginUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginUserRequest.Merge(dst, src)
}
func (m *LoginUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginUserRequest proto.InternalMessageInfo

func (m *LoginUserRequest) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *LoginUserRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *LoginUserRequest) GetDeviceInfo() *common.DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

type LoginUserResponse struct {
	Error                *Error   `protobuf:"varint,1,opt,name=error,enum=syzoj.service.user.rpc.Error" json:"error,omitempty"`
	Token                *string  `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginUserResponse) Reset()         { *m = LoginUserResponse{} }
func (m *LoginUserResponse) String() string { return proto.CompactTextString(m) }
func (*LoginUserResponse) ProtoMessage()    {}
func (*LoginUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{3}
}
func (m *LoginUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginUserResponse.Merge(dst, src)
}
func (m *LoginUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginUserResponse proto.InternalMessageInfo

func (m *LoginUserResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_DuplicateUserName
}

func (m *LoginUserResponse) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type VerifyDeviceRequest struct {
	Token                *string  `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyDeviceRequest) Reset()         { *m = VerifyDeviceRequest{} }
func (m *VerifyDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyDeviceRequest) ProtoMessage()    {}
func (*VerifyDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{4}
}
func (m *VerifyDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyDeviceRequest.Merge(dst, src)
}
func (m *VerifyDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyDeviceRequest proto.InternalMessageInfo

func (m *VerifyDeviceRequest) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type VerifyDeviceResponse struct {
	Error                *Error             `protobuf:"varint,1,opt,name=error,enum=syzoj.service.user.rpc.Error" json:"error,omitempty"`
	UserId               *string            `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceInfo           *common.DeviceInfo `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VerifyDeviceResponse) Reset()         { *m = VerifyDeviceResponse{} }
func (m *VerifyDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyDeviceResponse) ProtoMessage()    {}
func (*VerifyDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0, []int{5}
}
func (m *VerifyDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyDeviceResponse.Merge(dst, src)
}
func (m *VerifyDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyDeviceResponse proto.InternalMessageInfo

func (m *VerifyDeviceResponse) GetError() Error {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Error_DuplicateUserName
}

func (m *VerifyDeviceResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *VerifyDeviceResponse) GetDeviceInfo() *common.DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterUserRequest)(nil), "syzoj.service.user.rpc.RegisterUserRequest")
	proto.RegisterType((*RegisterUserResponse)(nil), "syzoj.service.user.rpc.RegisterUserResponse")
	proto.RegisterType((*LoginUserRequest)(nil), "syzoj.service.user.rpc.LoginUserRequest")
	proto.RegisterType((*LoginUserResponse)(nil), "syzoj.service.user.rpc.LoginUserResponse")
	proto.RegisterType((*VerifyDeviceRequest)(nil), "syzoj.service.user.rpc.VerifyDeviceRequest")
	proto.RegisterType((*VerifyDeviceResponse)(nil), "syzoj.service.user.rpc.VerifyDeviceResponse")
	proto.RegisterEnum("syzoj.service.user.rpc.Error", Error_name, Error_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	VerifyDevice(ctx context.Context, in *VerifyDeviceRequest, opts ...grpc.CallOption) (*VerifyDeviceResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.user.rpc.User/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.user.rpc.User/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyDevice(ctx context.Context, in *VerifyDeviceRequest, opts ...grpc.CallOption) (*VerifyDeviceResponse, error) {
	out := new(VerifyDeviceResponse)
	err := c.cc.Invoke(ctx, "/syzoj.service.user.rpc.User/VerifyDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	VerifyDevice(context.Context, *VerifyDeviceRequest) (*VerifyDeviceResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.user.rpc.User/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.user.rpc.User/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syzoj.service.user.rpc.User/VerifyDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyDevice(ctx, req.(*VerifyDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syzoj.service.user.rpc.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _User_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _User_LoginUser_Handler,
		},
		{
			MethodName: "VerifyDevice",
			Handler:    _User_VerifyDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syzoj.service.user.rpc.proto",
}

func (m *RegisterUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.UserName)))
		i += copy(dAtA[i:], *m.UserName)
	}
	if m.Password != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(*m.Error))
	}
	if m.UserId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.UserId)))
		i += copy(dAtA[i:], *m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.UserName)))
		i += copy(dAtA[i:], *m.UserName)
	}
	if m.Password != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.DeviceInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(m.DeviceInfo.Size()))
		n1, err := m.DeviceInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(*m.Error))
	}
	if m.Token != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VerifyDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VerifyDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(*m.Error))
	}
	if m.UserId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(len(*m.UserId)))
		i += copy(dAtA[i:], *m.UserId)
	}
	if m.DeviceInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyzojServiceUserRpc(dAtA, i, uint64(m.DeviceInfo.Size()))
		n2, err := m.DeviceInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSyzojServiceUserRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserName != nil {
		l = len(*m.UserName)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceUserRpc(uint64(*m.Error))
	}
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserName != nil {
		l = len(*m.UserName)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.DeviceInfo != nil {
		l = m.DeviceInfo.Size()
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceUserRpc(uint64(*m.Error))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += 1 + sovSyzojServiceUserRpc(uint64(*m.Error))
	}
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.DeviceInfo != nil {
		l = m.DeviceInfo.Size()
		n += 1 + l + sovSyzojServiceUserRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyzojServiceUserRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyzojServiceUserRpc(x uint64) (n int) {
	return sovSyzojServiceUserRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceInfo == nil {
				m.DeviceInfo = &common.DeviceInfo{}
			}
			if err := m.DeviceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v Error
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceInfo == nil {
				m.DeviceInfo = &common.DeviceInfo{}
			}
			if err := m.DeviceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyzojServiceUserRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyzojServiceUserRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyzojServiceUserRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyzojServiceUserRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyzojServiceUserRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyzojServiceUserRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyzojServiceUserRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyzojServiceUserRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyzojServiceUserRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyzojServiceUserRpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("syzoj.service.user.rpc.proto", fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0)
}

var fileDescriptor_syzoj_service_user_rpc_dde8b4e4b81528b0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0xa6, 0x0d, 0x34, 0xd3, 0x08, 0xdc, 0x4d, 0x80, 0x28, 0x40, 0xa8, 0x7c, 0x0a, 0x94,
	0xd8, 0x52, 0x38, 0x21, 0x6e, 0xa8, 0x20, 0x45, 0x42, 0x15, 0xb2, 0x28, 0x07, 0x0e, 0x14, 0x63,
	0x4f, 0xcc, 0x42, 0xbc, 0x63, 0x76, 0xed, 0xa2, 0xf2, 0x01, 0xfc, 0x06, 0x7f, 0xc2, 0x99, 0x23,
	0x9f, 0x80, 0xf2, 0x25, 0x68, 0xbd, 0x4e, 0x94, 0xa0, 0x58, 0xaa, 0x14, 0xb8, 0x58, 0x7e, 0xbb,
	0x6f, 0xde, 0xcc, 0x9b, 0x19, 0x1b, 0xee, 0xe8, 0x8b, 0xaf, 0xf4, 0xd1, 0xd3, 0xa8, 0xce, 0x45,
	0x84, 0x5e, 0xa1, 0x51, 0x79, 0x2a, 0x8b, 0xbc, 0x4c, 0x51, 0x4e, 0xfc, 0xe6, 0xe6, 0xdb, 0xfe,
	0xbd, 0x94, 0x62, 0x9c, 0xf9, 0x11, 0xa5, 0x29, 0x49, 0xdf, 0x92, 0x2c, 0xb0, 0x81, 0xee, 0x09,
	0x74, 0x02, 0x4c, 0x84, 0xce, 0x51, 0x9d, 0x6a, 0x54, 0x01, 0x7e, 0x2e, 0x50, 0xe7, 0xfc, 0x36,
	0xb4, 0x8c, 0xc6, 0x99, 0x0c, 0x53, 0xec, 0xb1, 0x43, 0x36, 0x6c, 0x05, 0x7b, 0xe6, 0xe0, 0x24,
	0x4c, 0x91, 0xf7, 0x61, 0x2f, 0x0b, 0xb5, 0xfe, 0x42, 0x2a, 0xee, 0x35, 0xec, 0xdd, 0x02, 0xbb,
	0x31, 0x74, 0xd7, 0xf5, 0x74, 0x46, 0x52, 0x23, 0x7f, 0x04, 0x4d, 0x54, 0x8a, 0x54, 0x29, 0x76,
	0x6d, 0x7c, 0xd7, 0xab, 0xb1, 0xf3, 0xcc, 0x90, 0x02, 0xcb, 0xe5, 0xb7, 0xe0, 0x6a, 0x59, 0x85,
	0x58, 0xe4, 0xb9, 0x62, 0xe0, 0x24, 0x76, 0xbf, 0x31, 0x70, 0x5e, 0x50, 0x22, 0xe4, 0xbf, 0xa8,
	0x99, 0x3f, 0x86, 0xfd, 0x18, 0x4d, 0x19, 0x67, 0x42, 0x4e, 0xa9, 0xb7, 0x73, 0xc8, 0x86, 0xfb,
	0xe3, 0x9e, 0xb7, 0xd6, 0xad, 0xe3, 0x92, 0x30, 0x91, 0x53, 0x0a, 0x20, 0x5e, 0xbe, 0xbb, 0x6f,
	0xe1, 0x60, 0xa5, 0x8e, 0x6d, 0xbc, 0x76, 0xa1, 0x99, 0xd3, 0x27, 0x94, 0x55, 0x75, 0x16, 0xb8,
	0x47, 0xd0, 0x79, 0x8d, 0x4a, 0x4c, 0x2f, 0x6c, 0xfe, 0x85, 0xd5, 0x25, 0x99, 0xad, 0x92, 0xbf,
	0x33, 0xe8, 0xae, 0xb3, 0xff, 0x47, 0xf3, 0xb7, 0x68, 0xd7, 0x03, 0x09, 0xcd, 0x32, 0x07, 0xbf,
	0x01, 0x07, 0xc7, 0x45, 0x36, 0x13, 0x51, 0x98, 0xe3, 0x69, 0x35, 0x23, 0x87, 0x71, 0x07, 0xda,
	0x25, 0xa2, 0xfc, 0x39, 0x15, 0x32, 0x76, 0x1a, 0x86, 0xf8, 0xb2, 0x9a, 0xd3, 0x44, 0x46, 0xa4,
	0x14, 0x46, 0xb9, 0xb3, 0x63, 0x88, 0x13, 0x79, 0x1e, 0xce, 0x44, 0xfc, 0xca, 0x58, 0x77, 0x76,
	0x79, 0x07, 0xae, 0x57, 0x27, 0x4b, 0xbd, 0xe6, 0xf8, 0x47, 0x03, 0x76, 0x0d, 0xe4, 0x02, 0xda,
	0xab, 0x6b, 0xc9, 0x8f, 0xea, 0x5a, 0xb0, 0xe1, 0x63, 0xe8, 0x3f, 0xbc, 0x1c, 0xb9, 0x6a, 0xf6,
	0x3b, 0x68, 0x2d, 0x57, 0x82, 0x0f, 0xeb, 0x42, 0xff, 0xde, 0xde, 0xfe, 0xfd, 0x4b, 0x30, 0xab,
	0x0c, 0x02, 0xda, 0xab, 0x63, 0xae, 0x37, 0xb3, 0x61, 0x75, 0xea, 0xcd, 0x6c, 0xda, 0x9c, 0xa7,
	0x4f, 0x7e, 0xce, 0x07, 0xec, 0xd7, 0x7c, 0xc0, 0x7e, 0xcf, 0x07, 0xec, 0xcd, 0x28, 0x11, 0xf9,
	0x87, 0xe2, 0xbd, 0x19, 0xb2, 0xfd, 0x97, 0xd8, 0xe7, 0x48, 0x26, 0xa3, 0x84, 0xfc, 0x4a, 0xd1,
	0x37, 0x8a, 0xbe, 0xca, 0xa2, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x8f, 0xa1, 0xef, 0xb3,
	0x04, 0x00, 0x00,
}
